{
    "objective": [
        "Determine the maximum number of rows and columns that can be filled with chips of a single color without violating the conditions.",
        "Calculate the total number of chips that can be placed without violating the conditions based on the output of sub-task 1.",
        "Verify that the placement is optimal and that any additional chip would violate the conditions based on the outputs of sub-task 1 and 2.",
        "Identify the properties of the hexagon ABCDEF, specifically determining the implications of it being convex, equilateral, and having pairs of opposite sides parallel.",
        "Determine how the side lengths of the triangle, which are extensions of segments AB, CD, and EF, relate to the side length of the hexagon.",
        "Calculate the side length of the hexagon ABCDEF based on the output of subtask 2.",
        "Analyze the function f(x)=|| x|-\tfrac{1}{2}| and determine its behavior and range.",
        "Analyze the function g(x)=|| x|-\tfrac{1}{4}| and determine its behavior and range.",
        "Determine the transformation g(f(x)) for any input x based on the outputs from sub-tasks 1 and 2.",
        "Analyze the function y=4 g(f(sin(2πx))) and determine its behavior and range.",
        "Analyze the function x=4 g(f(cos(3πy))) and determine its behavior and range.",
        "Find the intersection points of the graphs of y=4 g(f(sin(2πx))) and x=4 g(f(cos(3πy))).",
        "Calculate the total length of the path formed by eight circles of radius 34 that are sequentially tangent.",
        "Calculate the total length of the path formed by 2024 circles of radius 1 arranged in the same manner as the circles of radius 34.",
        "Determine the ratio of the total lengths of the paths formed by the circles of radius 34 and radius 1.",
        "Use the ratio obtained from subtask 3 and properties of the circles to find the inradius of triangle ABC.",
        "Express the inradius as a fraction in simplest form and find the sum of the numerator and denominator.",
        "Calculate the radius of the torus and its revolution distance based on the given parameters.",
        "Determine the conditions for tangency between the torus and the sphere.",
        "Calculate the difference between the radii of the circles of tangency.",
        "Simplify the expression for the difference and find the sum of the numerator and denominator when expressed as a fraction in simplest form.",
        "Identify the constraints and properties of the list based on the problem statement, including the sum, mode, and median requirements.",
        "Generate possible lists that satisfy the identified constraints from subtask 1.",
        "Calculate the sum of the squares of the items in the lists generated in subtask 2.",
        "Determine the parametric representation of the complex number z given |z|=4. Express z in terms of a parameter θ such that z = 4e^{iθ}.",
        "Substitute the parametric form of z into the original expression and simplify it to express the real part as a function of θ.",
        "Analyze the function obtained from subtask 2 to find the value of θ that maximizes the real part.",
        "Calculate the total number of ways to color the vertices of the octagon.",
        "Identify the number of colorings that allow for a rotation such that all blue vertices map to positions originally occupied by red vertices.",
        "Calculate the probability that a valid rotation exists based on the outputs of Sub-task 1 and Sub-task 2.",
        "Simplify the probability fraction obtained from Sub-task 3 and ensure that the integers m and n are relatively prime, then find m+n.",
        "Identify the least prime number p such that there exists a positive integer n where n^4 + 1 is divisible by p^2.",
        "Find the smallest positive integer m such that m^4 + 1 is divisible by p^2, based on the output of sub-task 1.",
        "Calculate the volume of the tetrahedron using the given edge lengths.",
        "Determine the formula for the distance from a point inside a tetrahedron to its faces based on the volume calculated in subtask 1.",
        "Find the specific distance from the point to the faces in terms of m√n/p and identify the values of m, n, and p.",
        "Sum the values of m, n, and p obtained from subtask 3 to get the final answer.",
        "Identify the constraints for a four-digit integer N such that changing any digit to 1 results in a number divisible by 7.",
        "Find the greatest four-digit integer N based on the constraints identified in Sub-task 1.",
        "Calculate the quotient Q and remainder R when the greatest N from Sub-task 2 is divided by 1000.",
        "Compute the sum Q + R based on the values of Q and R obtained from Sub-task 3.",
        "Identify the geometric relationships and properties of the given rectangles and circle.",
        "Calculate the lengths of line segments based on the given dimensions of the rectangles.",
        "Use the properties of the circle and rectangles to deduce the length of CE.",
        "Calculate the power of point D with respect to circle ω using the tangents from D to points B and C.",
        "Determine the length of segment AD using the power of point D and the given side lengths of triangle ABC.",
        "Calculate the length of segment AP using the outputs from subtasks 1 and 2, applying the intersecting chords theorem or the power of a point theorem.",
        "Convert the length of AP into the form m/n and find the sum m + n.",
        "Solve for x in terms of y and z given the equation log2(x/(yz)) = 1/2.",
        "Solve for y in terms of x and z given the equation log2(y/(xz)) = 1/3.",
        "Solve for z in terms of x and y given the equation log2(z/(xy)) = 1/4.",
        "Compute |log2(x^4y^3z^2)| based on the outputs of subtasks 1, 2, and 3.",
        "Verify and refine the solution for |log2(x^4y^3z^2)| to ensure its correctness.",
        "Derive equations from the given logarithmic conditions \\(\\log_x(y^x) = \\log_y(x^{4y}) = 10\\) and express them in terms of \\(x\\) and \\(y\\).",
        "Solve the equations derived in sub-task 1 to find expressions or values for \\(x\\) and \\(y\\).",
        "Calculate the product \\(xy\\) based on the values of \\(x\\) and \\(y\\) obtained from sub-task 2, ensuring the calculation is consistent by using multiple reasoning paths.",
        "Identify all possible combinations of digits for the top row that form a three-digit number.",
        "Identify all possible combinations of digits for the bottom row that form a three-digit number.",
        "Find combinations where the sum of the two numbers formed by reading left to right is 999.",
        "Find combinations where the sum of the three numbers formed by reading top to bottom is 99.",
        "Identify the common combinations that satisfy both conditions from subtask 3 and subtask 4.",
        "Determine the equation of the line segment AB and find the parametric representation of any point C on AB.",
        "Determine the constraints for a segment PQ of unit length lying in the first quadrant with P on the x-axis and Q on the y-axis.",
        "Find the unique point C on line segment AB that satisfies the condition of not belonging to any segment from family F other than AB.",
        "Calculate OC^2 and express it in the form of p/q where p and q are relatively prime positive integers.",
        "Calculate the number of residents owning at least one of the three items: diamond ring, golf clubs, and garden spade using the inclusion-exclusion principle.",
        "Determine the number of residents owning exactly two of the three items using the given data and the output from subtask 1.",
        "Calculate the number of residents owning exactly three of the three items based on the outputs of subtask 1 and subtask 2.",
        "Calculate the number of residents owning all four items, including the bag of candy hearts, based on the outputs of subtasks 1, 2, and 3.",
        "Calculate the expression 2 - 2*omega^k + omega^(2k) for each k from 0 to 12.",
        "Compute the product of all terms calculated in sub-task 1.",
        "Find the remainder when the product computed in sub-task 2 is divided by 1000.",
        "Calculate the area of triangle ABC using the circumradius R = 13 and inradius r = 6, applying the formula A = r × s, where s is the semi-perimeter.",
        "Determine the semi-perimeter s of triangle ABC based on the output of Sub-task 1, which provides the area of the triangle.",
        "Calculate the product AB · AC using the semi-perimeter and area obtained from Sub-tasks 1 and 2, while considering the condition that line IA is perpendicular to line OI.",
        "Identify the vertices of the dodecagon and list all possible diagonals.",
        "Calculate possible pairs of parallel lines (sides or diagonals) that can form rectangles.",
        "Count the number of rectangles formed by ensuring the selected pairs form a closed rectangle shape.",
        "Generate all possible triples of nonnegative integers (a, b, c) such that the sum a + b + c equals 300.",
        "Filter the generated triples (a, b, c) to find those that satisfy the equation a^2b + a^2c + b^2a + b^2c + c^2a + c^2b = 6,000,000.",
        "Determine the losing positions for Alice where any move leaves Bob in a winning position.",
        "Based on the losing positions for Alice from Sub-task 1, determine the winning positions for Bob.",
        "Based on the winning positions for Bob from Sub-task 2, count the number of such positions up to 2024.",
        "Calculate the total number of ways Jen can pick 4 distinct numbers from the set S = {1, 2, 3, ..., 10}.",
        "Determine the number of ways to pick 4 numbers from S such that at least 2 of them match with Jen's chosen numbers.",
        "Calculate the probability of winning a prize (at least 2 matches) based on the outputs from subtask 1 and subtask 2.",
        "Calculate the number of ways to pick 4 numbers from S such that all 4 of them match with Jen's chosen numbers.",
        "Calculate the probability of winning the grand prize (all 4 matches) based on the outputs from subtask 3 and subtask 4.",
        "Find m and n such that the probability of winning the grand prize given a prize is m/n, and compute m+n.",
        "Determine the equations of the diagonals of the rhombus, which intersect at the origin and are aligned with the axes of the hyperbola.",
        "Calculate the coordinates of points A, B, C, and D using the equations of the diagonals and the condition that these points lie on the hyperbola.",
        "Compute BD^2 and determine the greatest real number less than BD^2 for all such rhombi.",
        "Find all sets of dimensions (length, width, height) of a rectangular box with surface area 54 and volume 23.",
        "Calculate the diagonal of each box using the dimensions obtained from subtask 1.",
        "Find the minimum radius of the sphere that can contain the boxes and calculate its square.",
        "Simplify the fraction representing r^2 and find the sum of the numerator and denominator.",
        "Calculate Aya's walking speed s based on the information that when she walks at s km/h, the walk takes 4 hours including t minutes spent in the coffee shop.",
        "Determine the time spent in the coffee shop t using the information that when she walks at s+2 km/h, the walk takes 2 hours and 24 minutes including t minutes in the coffee shop.",
        "Calculate the time it takes for Aya to walk 9 km at s+1/2 km/h, including the t minutes spent in the coffee shop.",
        "Determine the possible configurations of direction changes for a path of length 16 on an 8x8 grid.",
        "Calculate the number of valid paths for each configuration of direction changes determined in subtask 1.",
        "Aggregate the results from subtask 2 to find the total number of paths that change direction exactly four times.",
        "Determine the properties of a b-beautiful integer, including how it is expressed in base b and verifying that the sum of its digits equals the square root of the integer.",
        "Calculate the range of possible b-beautiful integers for a given base b based on the properties determined in subtask 1.",
        "Count the number of b-beautiful integers for each base b and identify the smallest base b for which there are more than ten such integers.",
        "Determine the relationship between the number of sets Bob can list and the elements of set A.",
        "Calculate the specific elements of set A that result in 2024 subsets.",
        "Sum the elements of set A and refine the final answer based on previous outputs."
    ],
    "subtask_name": [
        "determine threshold parameter",
        "compute adjusted aggregate measure",
        "validate transformation output",
        "identify constraint specifications",
        "derive primary variable",
        "derive secondary variable",
        "determine scalar transformation characteristics",
        "determine scalar transformation characteristics",
        "compose mapping functions",
        "compute adjusted aggregate measure",
        "compute adjusted aggregate measure",
        "count mutual mapping solutions",
        "compute adjusted aggregate measure",
        "compute adjusted aggregate measure",
        "derive primary variable",
        "compose mapping functions",
        "simplify ratio and aggregate components",
        "derive primary variable",
        "identify constraint specifications",
        "aggregate series via binary operation",
        "simplify ratio and aggregate components",
        "identify constraint specifications",
        "identify constrained combinations",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "derive primary variable",
        "determine scalar transformation characteristics",
        "derive primary variable",
        "compute adjusted aggregate measure",
        "derive secondary variable",
        "simplify ratio and aggregate components",
        "derive primary variable",
        "derive secondary variable",
        "derive primary variable",
        "determine scalar transformation characteristics",
        "simplify ratio and aggregate components",
        "derive secondary variable",
        "identify constraint specifications",
        "determine threshold parameter",
        "decompose scalar via divisor operation",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "derive primary variable",
        "derive secondary variable",
        "derive primary variable",
        "compute adjusted aggregate measure",
        "derive secondary variable",
        "compute adjusted aggregate measure",
        "derive primary variable",
        "derive secondary variable",
        "derive tertiary variable",
        "compute adjusted aggregate measure",
        "validate transformation output",
        "compose mapping functions",
        "identify constrained combinations",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "identify constrained combinations",
        "filter constrained combinations",
        "filter constrained combinations",
        "identify mutual constraint satisfiers",
        "compose mapping functions",
        "identify constrained combinations",
        "filter constrained combinations",
        "reduce scalar output ratio",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "derive primary variable",
        "derive secondary variable",
        "compose mapping functions",
        "aggregate series via binary operation",
        "extract division remainder",
        "compute adjusted aggregate measure",
        "derive secondary variable",
        "derive primary variable",
        "identify constrained combinations",
        "filter constrained combinations",
        "count aggregated configurations",
        "identify constrained combinations",
        "filter constrained combinations",
        "identify constrained combinations",
        "derive secondary variable",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "identify constrained combinations",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "derive secondary variable",
        "simplify ratio and aggregate components",
        "compose mapping functions",
        "identify constrained combinations",
        "determine scalar transformation characteristics",
        "identify constrained combinations",
        "derive secondary variable",
        "determine scalar transformation characteristics",
        "simplify ratio and aggregate components",
        "derive primary variable",
        "derive secondary variable",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "count mutual mapping solutions",
        "compute adjusted aggregate measure",
        "identify constrained combinations",
        "filter constrained combinations",
        "determine threshold parameter",
        "compose mapping functions",
        "filter constrained combinations",
        "aggregate series via binary operation"
    ],
    "subtask_abstracted_objective": [
        "Compute the maximum parameter value under which a collection of groups can satisfy a uniformity constraint.",
        "Aggregate the total count of elements that conform to the uniformity constraint defined by the threshold.",
        "Confirm that any further incremental addition of an element would violate the specified constraint conditions.",
        "Enumerate structural and relational constraints imposed on input elements.",
        "Establish a functional relationship between a set of input scalars and a target variable based on specified conditions.",
        "Compute the target variable by applying the defined functional relationship to given scalar values.",
        "Identify where a single-input mapping changes its behavior and establish the full set of possible outputs.",
        "Identify where a single-input mapping changes its behavior and establish the full set of possible outputs.",
        "Define the behavior rules of a function that applies two mappings in sequence to an arbitrary input.",
        "Determine the output boundaries and behavioral transitions of a scaled composition of two mappings applied to a first parameter-derived input.",
        "Determine the output boundaries and behavioral transitions of a scaled composition of two mappings applied to a second parameter-derived input.",
        "Enumerate and count the input combinations that satisfy two mutual mapping relations between their independent and dependent variables.",
        "Aggregate identical input values across a defined count using a linear combination.",
        "Aggregate identical input values across a defined count applying a transformation factor.",
        "Compute the ratio between two scalar measures derived from separate aggregate computations.",
        "Combine a scalar measure with fixed parameters through a defined mapping to compute a new scalar output.",
        "Reduce a scalar ratio to lowest integer components and compute the sum of those components.",
        "Compute foundational scalar quantities by applying direct transformations to the input parameters.",
        "Establish the relational criteria that two sets of values must satisfy under the defined condition.",
        "Compute the difference between two scalar values by applying a subtraction operation.",
        "Reduce a rational expression to simplest form and then compute the sum of its numerator and denominator.",
        "Specify all quantitative constraints and uniqueness requirements that any valid collection must fulfill.",
        "Enumerate all collections of elements that satisfy the specified quantitative constraints and uniqueness requirements.",
        "Apply a transformation function to each element in a collection and combine the results via an aggregation operation to yield a single summary measure.",
        "Represent an input element that satisfies a fixed scalar constraint using a single free parameter.",
        "Substitute the parameterized element into a given expression and compute the resulting target component as a function of the parameter.",
        "Analyze the parameterized scalar function to determine the parameter value that optimizes the function.",
        "Aggregate all possible configurations of binary assignments across a fixed number of positions.",
        "Count the number of configurations that satisfy a specific mapping constraint between two categories under a transformation.",
        "Determine the ratio between a subset count and a total count of configurations.",
        "Reduce a ratio to lowest terms and compute the sum of its integer components.",
        "Identify the minimal parameter value for which there exists an input satisfying a specified condition defined by a parametric function.",
        "Identify the minimal input value that satisfies the same specified condition defined by a parametric function for a given parameter.",
        "Aggregate multiple numerical inputs into a single scalar output via a generalized multi-input functional rule.",
        "Formulate a functional relation linking an initial scalar input to a derived measure using a proportional scaling rule.",
        "Express a scalar result as a simplified ratio of integer components and extract each integer factor.",
        "Combine extracted integer components into a final summary value through additive aggregation.",
        "Specify all quantitative constraints and transformation requirements that any valid input configuration must satisfy under a uniform modification operation.",
        "Select the maximal element from a predefined range of candidates that meets all specified constraints.",
        "Divide a scalar input by a fixed divisor and decompose the result into two constituent scalar components.",
        "Combine two scalar components via an aggregation function to produce a single summary output.",
        "Identify combinations of input elements that satisfy multiple relational conditions simultaneously.",
        "Apply numerical transformations to input values to compute specific quantitative outputs.",
        "Combine relational conditions and computed quantitative outputs to derive a final target variable.",
        "Compute a baseline measure by applying a symmetric operation to two identical input values.",
        "Compute an intermediate measure by adjusting the baseline measure with additional input values.",
        "Combine the baseline measure and the intermediate measure using a two-input functional rule to produce a secondary measure.",
        "Convert a measure into a ratio of two integer components and compute the sum of those components.",
        "Generate an expression that defines one input by multiplying the combination of two other inputs by a fixed scalar factor.",
        "Generate an expression that defines a different input by multiplying the combination of two inputs by another fixed scalar factor.",
        "Generate an expression that defines a third input by multiplying the combination of two inputs by a separate fixed scalar factor.",
        "Calculate the absolute magnitude of a composite scalar obtained by combining three inputs under specified multiplicative weights.",
        "Verify and refine the computed scalar measure to ensure consistency and correctness under the defined transformation rules.",
        "Represent the given constraints as abstract relations between symbolic parameters.",
        "Determine the parameter assignments that satisfy the established abstract relations under specified bounds.",
        "Aggregate the determined parameter values into a single scalar output using a defined multi-input operation and verify consistency through multiple reasoning paths.",
        "Generate all ordered sequences of a fixed length from a predefined finite range of values.",
        "Generate all ordered sequences of a fixed length from a predefined finite range of values.",
        "Select all pairs of elements whose combined evaluation under a specified binary operation equals a given constant.",
        "Select all triples of elements whose combined evaluation under a specified aggregation function equals a given constant.",
        "Filter a set of candidates to retain only those elements that simultaneously satisfy two independent constraint conditions.",
        "Define a linear interpolation mapping between two generic input values as a function of a single free parameter.",
        "Specify the set of all non-negative input pairs whose combination under a given binary operation equals a fixed constant.",
        "Determine the unique parameter value for which the mapping output is excluded from every set in a given collection except one designated set.",
        "Compute the square of an input scalar and express the result as a fully reduced ratio of two integers.",
        "Combine multiple input values into a single aggregate output that accounts for redundant contributions.",
        "Determine the count of elements that satisfy exactly two out of three specified conditions.",
        "Compute the number of elements that fulfill all three given criteria simultaneously.",
        "Determine the count of elements that satisfy four specified conditions at the same time.",
        "Apply a predefined transformation function to each element in a finite index sequence to generate a corresponding sequence of outputs.",
        "Combine all elements of a generated sequence through repeated application of a binary operation to yield a single aggregate value.",
        "Perform an integer division of a scalar by a fixed divisor and extract the remainder as the result.",
        "Multiply a known scalar input by an undetermined intermediate scalar to produce an aggregate output.",
        "Divide a previously computed aggregate output by a given scalar to derive a new scalar value.",
        "Combine two scalar inputs via multiplication under an independent relational constraint on auxiliary parameters to produce a target scalar.",
        "Generate all pairs drawn from a finite element set that satisfy a specified exclusion relation.",
        "Select from a collection of element pairs those pairs that satisfy a given binary relation between them.",
        "Count the number of distinct groupings of element pairs that fulfill a composite closure constraint.",
        "Enumerate all ordered triples of elements drawn from a predefined set that satisfy a fixed aggregate equality constraint.",
        "Filter the enumerated triples to retain those that satisfy a specified secondary aggregate condition.",
        "Identify input elements for which every permitted operation yields outputs that lie within a predefined category.",
        "Determine the complement of a specified subset within a defined domain of input elements.",
        "Compute the count of elements in a specified subset that satisfy a given boundary condition.",
        "Determine the total count of distinct input selections of a specified size drawn from a larger collection.",
        "Compute the number of distinct input selections that share at least a threshold number of elements with a fixed reference selection.",
        "Compute the ratio between a constrained selection count and the total selection count to derive a primary scalar measure.",
        "Determine the number of distinct input selections that exactly match a given reference selection.",
        "Compute the ratio of an exact-match selection count to a previously derived primary measure, yielding a secondary scalar variable.",
        "Simplify a scalar ratio into its reduced integer components and compute the sum of those components.",
        "Formulate expressions for two intersecting components given a common intersection point and orientation constraints.",
        "Determine all value combinations that satisfy both a pair of predefined expressions and an independent constraint.",
        "Compute a scalar measure from two selected value combinations and determine its greatest lower bound across all valid configurations.",
        "Identify all ordered triples of input values that satisfy two independent constraint rules simultaneously.",
        "Apply a predefined unary transformation to each triple from the solution set and record the results.",
        "Evaluate the transformed values under a scalar operation and determine the minimal outcome.",
        "Express the minimal outcome as a ratio in lowest terms and compute the sum of its two integer components.",
        "Determine the value of a variable that, when combined with a fixed component, yields a specified total measure.",
        "Determine the fixed component that ensures a specified total measure when the primary variable is adjusted by a constant amount.",
        "Compute the total measure when the primary variable is set to a new value and combined with the determined fixed component.",
        "Identify all structured selections from a sequential index set that satisfy a fixed cardinality requirement.",
        "For each predefined selection of positions, compute the number of sequences that meet specified boundary and total-length constraints.",
        "Combine the computed counts from all configurations into a single summary value by additive aggregation.",
        "Specify a pair of input values and a target relationship between them, and define the condition under which their combined components satisfy that relationship.",
        "Generate all pairs of inputs within a given parameter range and retain those that meet the predefined relationship condition.",
        "For each parameter value, count the retained pairs and identify the smallest parameter for which the count exceeds a specified threshold.",
        "Define a functional relationship mapping input parameters to the total count of valid configurations.",
        "Select input parameter configurations whose mapped output equals a specified target count.",
        "Combine the selected input values into a final summary measure through an aggregation operation."
    ],
    "merge_subtask": [
        "determine threshold parameter: Compute the maximum parameter value under which a collection of groups can satisfy a uniformity constraint.",
        "compute adjusted aggregate measure: Aggregate the total count of elements that conform to the uniformity constraint defined by the threshold.",
        "validate transformation output: Confirm that any further incremental addition of an element would violate the specified constraint conditions.",
        "identify constraint specifications: Enumerate structural and relational constraints imposed on input elements.",
        "derive primary variable: Establish a functional relationship between a set of input scalars and a target variable based on specified conditions.",
        "derive secondary variable: Compute the target variable by applying the defined functional relationship to given scalar values.",
        "determine scalar transformation characteristics: Identify where a single-input mapping changes its behavior and establish the full set of possible outputs.",
        "determine scalar transformation characteristics: Identify where a single-input mapping changes its behavior and establish the full set of possible outputs.",
        "compose mapping functions: Define the behavior rules of a function that applies two mappings in sequence to an arbitrary input.",
        "compute adjusted aggregate measure: Determine the output boundaries and behavioral transitions of a scaled composition of two mappings applied to a first parameter-derived input.",
        "compute adjusted aggregate measure: Determine the output boundaries and behavioral transitions of a scaled composition of two mappings applied to a second parameter-derived input.",
        "count mutual mapping solutions: Enumerate and count the input combinations that satisfy two mutual mapping relations between their independent and dependent variables.",
        "compute adjusted aggregate measure: Aggregate identical input values across a defined count using a linear combination.",
        "compute adjusted aggregate measure: Aggregate identical input values across a defined count applying a transformation factor.",
        "derive primary variable: Compute the ratio between two scalar measures derived from separate aggregate computations.",
        "compose mapping functions: Combine a scalar measure with fixed parameters through a defined mapping to compute a new scalar output.",
        "simplify ratio and aggregate components: Reduce a scalar ratio to lowest integer components and compute the sum of those components.",
        "derive primary variable: Compute foundational scalar quantities by applying direct transformations to the input parameters.",
        "identify constraint specifications: Establish the relational criteria that two sets of values must satisfy under the defined condition.",
        "aggregate series via binary operation: Compute the difference between two scalar values by applying a subtraction operation.",
        "simplify ratio and aggregate components: Reduce a rational expression to simplest form and then compute the sum of its numerator and denominator.",
        "identify constraint specifications: Specify all quantitative constraints and uniqueness requirements that any valid collection must fulfill.",
        "identify constrained combinations: Enumerate all collections of elements that satisfy the specified quantitative constraints and uniqueness requirements.",
        "compute adjusted aggregate measure: Apply a transformation function to each element in a collection and combine the results via an aggregation operation to yield a single summary measure.",
        "identify constrained combinations: Represent an input element that satisfies a fixed scalar constraint using a single free parameter.",
        "derive primary variable: Substitute the parameterized element into a given expression and compute the resulting target component as a function of the parameter.",
        "determine scalar transformation characteristics: Analyze the parameterized scalar function to determine the parameter value that optimizes the function.",
        "derive primary variable: Aggregate all possible configurations of binary assignments across a fixed number of positions.",
        "compute adjusted aggregate measure: Count the number of configurations that satisfy a specific mapping constraint between two categories under a transformation.",
        "derive secondary variable: Determine the ratio between a subset count and a total count of configurations.",
        "simplify ratio and aggregate components: Reduce a ratio to lowest terms and compute the sum of its integer components.",
        "derive primary variable: Identify the minimal parameter value for which there exists an input satisfying a specified condition defined by a parametric function.",
        "derive secondary variable: Identify the minimal input value that satisfies the same specified condition defined by a parametric function for a given parameter.",
        "derive primary variable: Aggregate multiple numerical inputs into a single scalar output via a generalized multi-input functional rule.",
        "determine scalar transformation characteristics: Formulate a functional relation linking an initial scalar input to a derived measure using a proportional scaling rule.",
        "simplify ratio and aggregate components: Express a scalar result as a simplified ratio of integer components and extract each integer factor.",
        "derive secondary variable: Combine extracted integer components into a final summary value through additive aggregation.",
        "identify constraint specifications: Specify all quantitative constraints and transformation requirements that any valid input configuration must satisfy under a uniform modification operation.",
        "determine threshold parameter: Select the maximal element from a predefined range of candidates that meets all specified constraints.",
        "decompose scalar via divisor operation: Divide a scalar input by a fixed divisor and decompose the result into two constituent scalar components.",
        "compute adjusted aggregate measure: Combine two scalar components via an aggregation function to produce a single summary output.",
        "identify constrained combinations: Identify combinations of input elements that satisfy multiple relational conditions simultaneously.",
        "derive primary variable: Apply numerical transformations to input values to compute specific quantitative outputs.",
        "derive secondary variable: Combine relational conditions and computed quantitative outputs to derive a final target variable.",
        "derive primary variable: Compute a baseline measure by applying a symmetric operation to two identical input values.",
        "compute adjusted aggregate measure: Compute an intermediate measure by adjusting the baseline measure with additional input values.",
        "derive secondary variable: Combine the baseline measure and the intermediate measure using a two-input functional rule to produce a secondary measure.",
        "compute adjusted aggregate measure: Convert a measure into a ratio of two integer components and compute the sum of those components.",
        "derive primary variable: Generate an expression that defines one input by multiplying the combination of two other inputs by a fixed scalar factor.",
        "derive secondary variable: Generate an expression that defines a different input by multiplying the combination of two inputs by another fixed scalar factor.",
        "derive tertiary variable: Generate an expression that defines a third input by multiplying the combination of two inputs by a separate fixed scalar factor.",
        "compute adjusted aggregate measure: Calculate the absolute magnitude of a composite scalar obtained by combining three inputs under specified multiplicative weights.",
        "validate transformation output: Verify and refine the computed scalar measure to ensure consistency and correctness under the defined transformation rules.",
        "compose mapping functions: Represent the given constraints as abstract relations between symbolic parameters.",
        "identify constrained combinations: Determine the parameter assignments that satisfy the established abstract relations under specified bounds.",
        "compute adjusted aggregate measure: Aggregate the determined parameter values into a single scalar output using a defined multi-input operation and verify consistency through multiple reasoning paths.",
        "identify constrained combinations: Generate all ordered sequences of a fixed length from a predefined finite range of values.",
        "identify constrained combinations: Generate all ordered sequences of a fixed length from a predefined finite range of values.",
        "filter constrained combinations: Select all pairs of elements whose combined evaluation under a specified binary operation equals a given constant.",
        "filter constrained combinations: Select all triples of elements whose combined evaluation under a specified aggregation function equals a given constant.",
        "identify mutual constraint satisfiers: Filter a set of candidates to retain only those elements that simultaneously satisfy two independent constraint conditions.",
        "compose mapping functions: Define a linear interpolation mapping between two generic input values as a function of a single free parameter.",
        "identify constrained combinations: Specify the set of all non-negative input pairs whose combination under a given binary operation equals a fixed constant.",
        "filter constrained combinations: Determine the unique parameter value for which the mapping output is excluded from every set in a given collection except one designated set.",
        "reduce scalar output ratio: Compute the square of an input scalar and express the result as a fully reduced ratio of two integers.",
        "compute adjusted aggregate measure: Combine multiple input values into a single aggregate output that accounts for redundant contributions.",
        "identify constrained combinations: Determine the count of elements that satisfy exactly two out of three specified conditions.",
        "derive primary variable: Compute the number of elements that fulfill all three given criteria simultaneously.",
        "derive secondary variable: Determine the count of elements that satisfy four specified conditions at the same time.",
        "compose mapping functions: Apply a predefined transformation function to each element in a finite index sequence to generate a corresponding sequence of outputs.",
        "aggregate series via binary operation: Combine all elements of a generated sequence through repeated application of a binary operation to yield a single aggregate value.",
        "extract division remainder: Perform an integer division of a scalar by a fixed divisor and extract the remainder as the result.",
        "compute adjusted aggregate measure: Multiply a known scalar input by an undetermined intermediate scalar to produce an aggregate output.",
        "derive secondary variable: Divide a previously computed aggregate output by a given scalar to derive a new scalar value.",
        "derive primary variable: Combine two scalar inputs via multiplication under an independent relational constraint on auxiliary parameters to produce a target scalar.",
        "identify constrained combinations: Generate all pairs drawn from a finite element set that satisfy a specified exclusion relation.",
        "filter constrained combinations: Select from a collection of element pairs those pairs that satisfy a given binary relation between them.",
        "count aggregated configurations: Count the number of distinct groupings of element pairs that fulfill a composite closure constraint.",
        "identify constrained combinations: Enumerate all ordered triples of elements drawn from a predefined set that satisfy a fixed aggregate equality constraint.",
        "filter constrained combinations: Filter the enumerated triples to retain those that satisfy a specified secondary aggregate condition.",
        "identify constrained combinations: Identify input elements for which every permitted operation yields outputs that lie within a predefined category.",
        "derive secondary variable: Determine the complement of a specified subset within a defined domain of input elements.",
        "compute adjusted aggregate measure: Compute the count of elements in a specified subset that satisfy a given boundary condition.",
        "identify constrained combinations: Determine the total count of distinct input selections of a specified size drawn from a larger collection.",
        "identify constrained combinations: Compute the number of distinct input selections that share at least a threshold number of elements with a fixed reference selection.",
        "compute adjusted aggregate measure: Compute the ratio between a constrained selection count and the total selection count to derive a primary scalar measure.",
        "identify constrained combinations: Determine the number of distinct input selections that exactly match a given reference selection.",
        "derive secondary variable: Compute the ratio of an exact-match selection count to a previously derived primary measure, yielding a secondary scalar variable.",
        "simplify ratio and aggregate components: Simplify a scalar ratio into its reduced integer components and compute the sum of those components.",
        "compose mapping functions: Formulate expressions for two intersecting components given a common intersection point and orientation constraints.",
        "identify constrained combinations: Determine all value combinations that satisfy both a pair of predefined expressions and an independent constraint.",
        "determine scalar transformation characteristics: Compute a scalar measure from two selected value combinations and determine its greatest lower bound across all valid configurations.",
        "identify constrained combinations: Identify all ordered triples of input values that satisfy two independent constraint rules simultaneously.",
        "derive secondary variable: Apply a predefined unary transformation to each triple from the solution set and record the results.",
        "determine scalar transformation characteristics: Evaluate the transformed values under a scalar operation and determine the minimal outcome.",
        "simplify ratio and aggregate components: Express the minimal outcome as a ratio in lowest terms and compute the sum of its two integer components.",
        "derive primary variable: Determine the value of a variable that, when combined with a fixed component, yields a specified total measure.",
        "derive secondary variable: Determine the fixed component that ensures a specified total measure when the primary variable is adjusted by a constant amount.",
        "compute adjusted aggregate measure: Compute the total measure when the primary variable is set to a new value and combined with the determined fixed component.",
        "identify constrained combinations: Identify all structured selections from a sequential index set that satisfy a fixed cardinality requirement.",
        "count mutual mapping solutions: For each predefined selection of positions, compute the number of sequences that meet specified boundary and total-length constraints.",
        "compute adjusted aggregate measure: Combine the computed counts from all configurations into a single summary value by additive aggregation.",
        "identify constrained combinations: Specify a pair of input values and a target relationship between them, and define the condition under which their combined components satisfy that relationship.",
        "filter constrained combinations: Generate all pairs of inputs within a given parameter range and retain those that meet the predefined relationship condition.",
        "determine threshold parameter: For each parameter value, count the retained pairs and identify the smallest parameter for which the count exceeds a specified threshold.",
        "compose mapping functions: Define a functional relationship mapping input parameters to the total count of valid configurations.",
        "filter constrained combinations: Select input parameter configurations whose mapped output equals a specified target count.",
        "aggregate series via binary operation: Combine the selected input values into a final summary measure through an aggregation operation."
    ],
    "clusters": [
        "5",
        "0",
        "8",
        "8",
        "6",
        "6",
        "2",
        "2",
        "3",
        "0",
        "0",
        "5",
        "0",
        "0",
        "6",
        "3",
        "4",
        "6",
        "8",
        "0",
        "4",
        "8",
        "1",
        "0",
        "1",
        "6",
        "2",
        "5",
        "5",
        "5",
        "4",
        "2",
        "2",
        "0",
        "2",
        "4",
        "0",
        "8",
        "2",
        "6",
        "0",
        "1",
        "6",
        "6",
        "6",
        "0",
        "6",
        "0",
        "6",
        "6",
        "6",
        "0",
        "8",
        "3",
        "1",
        "0",
        "7",
        "7",
        "1",
        "1",
        "1",
        "3",
        "1",
        "1",
        "4",
        "0",
        "1",
        "5",
        "5",
        "3",
        "0",
        "6",
        "0",
        "6",
        "6",
        "1",
        "1",
        "5",
        "1",
        "1",
        "1",
        "5",
        "0",
        "1",
        "1",
        "0",
        "1",
        "6",
        "4",
        "3",
        "1",
        "2",
        "1",
        "6",
        "2",
        "4",
        "6",
        "6",
        "0",
        "7",
        "7",
        "0",
        "1",
        "1",
        "5",
        "3",
        "1",
        "0"
    ],
    "agent_collaboration": [
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "Debate",
        "CoT",
        "CoT",
        "SC_CoT",
        "CoT",
        "CoT",
        "CoT",
        "CoT",
        "CoT",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "Debate",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "CoT",
        "CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "Reflexion",
        "SC_CoT",
        "CoT",
        "CoT",
        "SC_CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion"
    ],
    "dependencies": [
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_5",
            "subtask_0"
        ],
        [],
        [
            "subtask_8"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_2"
        ],
        [
            "subtask_2",
            "subtask_2"
        ],
        [
            "subtask_3"
        ],
        [
            "subtask_3"
        ],
        [
            "subtask_0",
            "subtask_0"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_0"
        ],
        [
            "subtask_6"
        ],
        [
            "subtask_3"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_8"
        ],
        [
            "subtask_0"
        ],
        [],
        [
            "subtask_8"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_5",
            "subtask_5"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_2"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_2"
        ],
        [
            "subtask_0",
            "subtask_2",
            "subtask_4"
        ],
        [],
        [
            "subtask_8"
        ],
        [
            "subtask_2"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1",
            "subtask_6"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_0"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_0"
        ],
        [],
        [
            "subtask_3"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_7"
        ],
        [
            "subtask_7",
            "subtask_7"
        ],
        [
            "subtask_7",
            "subtask_7"
        ],
        [
            "subtask_1",
            "subtask_1"
        ],
        [],
        [
            "subtask_3"
        ],
        [
            "subtask_3",
            "subtask_1"
        ],
        [
            "subtask_3",
            "subtask_1",
            "subtask_1"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_1"
        ],
        [
            "subtask_0",
            "subtask_1",
            "subtask_5"
        ],
        [],
        [
            "subtask_3"
        ],
        [
            "subtask_0"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_6"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1",
            "subtask_1"
        ],
        [],
        [
            "subtask_0",
            "subtask_1"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_3"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_6"
        ],
        [
            "subtask_2"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [],
        [
            "subtask_7"
        ],
        [
            "subtask_7"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_3"
        ],
        [
            "subtask_3",
            "subtask_1"
        ]
    ]
}