
============== high level task decomposition ================
[{'objective': 'Identify and characterize the retrovirus by sequencing its genetic material.'}, {'objective': 'Select a specific molecular target (e.g., viral DNA, RNA, or cDNA) suitable for detection.'}, {'objective': 'Develop a molecular detection assay such as PCR or real-time PCR based on the selected target.'}, {'objective': 'Validate the diagnostic kit for sensitivity, specificity, and rapid detection capability.'}]
============== abstracted high level task decomposition ================
['Extract defining features: Analyze and characterize an input entity by extracting and defining its fundamental components or attributes.', 'Select by Multiple Criteria and Derive Target Output: Select a specific target element or subset from the characterized input based on defined criteria suitable for further processing or detection.', 'Apply Transformation and Compute Quantitative Measure: Develop a detection or processing mechanism by applying defined transformations or operations to the selected target element to produce measurable outputs.', 'Evaluate Conformity and Validity: Evaluate the developed mechanism against performance criteria such as accuracy, reliability, and efficiency to validate its effectiveness.']
============== Task detailed analysis ================
1. Extract and Summarize Given Information:
- The problem context is an outbreak of a viral infectious disease caused by a retrovirus.
- The goal is to design a molecular diagnostic kit for quick detection.
- Four choices are provided, each describing a sequence of steps:
  * Choice 1: Identify virus by DNA sequencing, then develop a PCR kit.
  * Choice 2: Identify IgG antibodies, then develop an ELISA kit targeting IgG.
  * Choice 3: Identify virus using symptom information, then design a nested PCR kit.
  * Choice 4: Identify virus by cDNA sequencing, then develop a real-time PCR kit.
- Key entities include the virus, viral genetic material (DNA or cDNA), antibodies (IgG), diagnostic methods (PCR, nested PCR, real-time PCR, ELISA).

2. Analyze Relationships Between Components:
- Identification methods vary: direct genetic sequencing (DNA or cDNA), antibody detection, or symptom-based inference.
- Diagnostic kits correspond to identification: PCR-based kits rely on nucleic acid detection; ELISA targets antibodies.
- Constraints include speed and accuracy of diagnosis.
- The choice of sequencing (DNA vs. cDNA) relates to the retrovirus biology (RNA genome requiring reverse transcription).
- Symptom-based identification is indirect and may affect specificity.
- Nested PCR and real-time PCR are advanced PCR techniques enhancing sensitivity and quantification.
- These components influence the diagnostic approach's reliability, speed, and specificity.

3. Identify the Field of Study:
- Primary domain: Molecular biology and biotechnology.
- Subfields: Virology, diagnostic assay development, molecular diagnostics.
- Techniques involved: DNA/RNA sequencing, PCR methodologies, immunoassays (ELISA).
- Applications: Clinical diagnostics, infectious disease control, public health.

4. Highlight Aspects Needing Clarification:
- The problem does not specify the viral genome type explicitly (RNA or DNA), which affects sequencing choice.
- The role of symptom-based identification is vague and may lack precision.
- It is unclear whether antibody detection is suitable for early diagnosis or only post-infection.
- The problem does not specify constraints like available resources, time frame, or required sensitivity.
- Potential challenges include differentiating between active infection and past exposure (especially for antibody tests), and the technical feasibility of each method in the given context.
============== Task Decomposition ================
{'stage_1': {'subtask_1': {'objective': 'Extract and summarize defining features of the retrovirus outbreak, including viral genome type, diagnostic targets (nucleic acid vs antibodies), and constraints for quick and accurate detection.', 'dependencies': [], 'agent_collaboration': 'SC_CoT'}, 'subtask_2': {'objective': 'Analyze and classify possible identification methods (DNA sequencing, cDNA sequencing, antibody detection, symptom-based inference) and corresponding diagnostic techniques (PCR variants, ELISA), assessing their biological relevance and diagnostic potential.', 'dependencies': ['subtask_1'], 'agent_collaboration': 'Debate'}}, 'stage_2': {'subtask_3': {'objective': 'Transform the classified identification and diagnostic methods into concrete diagnostic kit design variants, including PCR-based kits (standard PCR, nested PCR, real-time PCR) and antibody-based ELISA kits, considering retrovirus biology and diagnostic goals.', 'dependencies': ['subtask_2'], 'agent_collaboration': 'SC_CoT'}}, 'stage_3': {'subtask_4': {'objective': 'Evaluate and prioritize the diagnostic kit design variants based on criteria such as speed, accuracy, specificity, feasibility, and suitability for retrovirus detection, to select the optimal design approach.', 'dependencies': ['subtask_2', 'subtask_3'], 'agent_collaboration': 'Debate'}}}
============== Concretized MAS ================
async def forward_156(self, taskInfo):
    logs = []

    cot_sc_instruction1 = (
        "Sub-task 1: Extract and summarize defining features of the retrovirus outbreak, including viral genome type, "
        "diagnostic targets (nucleic acid vs antibodies), and constraints for quick and accurate detection, "
        "based on the provided query and choices."
    )
    final_decision_instruction1 = (
        "Sub-task 1: Synthesize and choose the most consistent summary of retrovirus features and diagnostic constraints."
    )
    cot_sc_desc1 = {
        'instruction': cot_sc_instruction1,
        'final_decision_instruction': final_decision_instruction1,
        'input': [taskInfo],
        'temperature': 0.5,
        'context_desc': ["user query"]
    }
    results1, log1 = await self.sc_cot(
        subtask_id="subtask_1",
        cot_agent_desc=cot_sc_desc1,
        n_repeat=self.max_sc
    )
    logs.append(log1)

    debate_instruction2 = (
        "Sub-task 2: Analyze and classify possible identification methods (DNA sequencing, cDNA sequencing, antibody detection, symptom-based inference) "
        "and corresponding diagnostic techniques (PCR variants, ELISA), assessing their biological relevance and diagnostic potential for retrovirus detection, "
        "based on the summary from Sub-task 1."
    )
    final_decision_instruction2 = (
        "Sub-task 2: Debate and select the most biologically relevant and diagnostically effective identification and diagnostic methods."
    )
    debate_desc2 = {
        'instruction': debate_instruction2,
        'final_decision_instruction': final_decision_instruction2,
        'input': [taskInfo, results1['thinking'], results1['answer']],
        'context_desc': ["user query", "thinking of subtask 1", "answer of subtask 1"],
        'temperature': 0.5
    }
    results2, log2 = await self.debate(
        subtask_id="subtask_2",
        debate_desc=debate_desc2,
        n_repeat=self.max_round
    )
    logs.append(log2)

    cot_sc_instruction3 = (
        "Sub-task 3: Transform the classified identification and diagnostic methods from Sub-task 2 into concrete diagnostic kit design variants, "
        "including PCR-based kits (standard PCR, nested PCR, real-time PCR) and antibody-based ELISA kits, considering retrovirus biology and diagnostic goals."
    )
    final_decision_instruction3 = (
        "Sub-task 3: Synthesize and select the most feasible and effective diagnostic kit design variants."
    )
    cot_sc_desc3 = {
        'instruction': cot_sc_instruction3,
        'final_decision_instruction': final_decision_instruction3,
        'input': [taskInfo, results2['thinking'], results2['answer']],
        'temperature': 0.5,
        'context_desc': ["user query", "thinking of subtask 2", "answer of subtask 2"]
    }
    results3, log3 = await self.sc_cot(
        subtask_id="subtask_3",
        cot_agent_desc=cot_sc_desc3,
        n_repeat=self.max_sc
    )
    logs.append(log3)

    debate_instruction4 = (
        "Sub-task 4: Evaluate and prioritize the diagnostic kit design variants from Sub-task 3 based on criteria such as speed, accuracy, specificity, feasibility, "
        "and suitability for retrovirus detection, to select the optimal design approach."
    )
    final_decision_instruction4 = (
        "Sub-task 4: Debate and select the optimal diagnostic kit design for quick and accurate retrovirus detection."
    )
    debate_desc4 = {
        'instruction': debate_instruction4,
        'final_decision_instruction': final_decision_instruction4,
        'input': [taskInfo, results2['thinking'], results2['answer'], results3['thinking'], results3['answer']],
        'context_desc': ["user query", "thinking of subtask 2", "answer of subtask 2", "thinking of subtask 3", "answer of subtask 3"],
        'temperature': 0.5
    }
    results4, log4 = await self.debate(
        subtask_id="subtask_4",
        debate_desc=debate_desc4,
        n_repeat=self.max_round
    )
    logs.append(log4)

    final_answer = await self.make_final_answer(results4['thinking'], results4['answer'])
    return final_answer, logs
