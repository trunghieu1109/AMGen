
============== high level task decomposition ================
[{'objective': 'Identify and characterize the retrovirus by sequencing its genetic material.'}, {'objective': 'Select a specific molecular target (e.g., viral DNA, RNA, or cDNA) suitable for detection.'}, {'objective': 'Develop a molecular detection assay such as PCR or real-time PCR based on the selected target.'}, {'objective': 'Validate the diagnostic kit for sensitivity, specificity, and rapid detection capability.'}]
============== abstracted high level task decomposition ================
['Extract defining features: Analyze an input entity or dataset to identify, isolate, and characterize its essential components or attributes.', 'Select and Compute Measures by Criteria: Evaluate a collection of elements against defined criteria to identify and select a specific target suitable for further processing.', 'Apply Transformation: Apply one or more defined operations or transformations to generate a detection or identification method based on the selected target.', 'Evaluate Conformity and Validity: Evaluate and verify whether a developed method or output meets specified performance criteria such as accuracy, sensitivity, and efficiency.']
============== Task detailed analysis ================
1. Extract and Summarize Given Information:
- The problem context is an outbreak of a viral infectious disease caused by a retrovirus.
- The goal is to design a molecular diagnostic kit for quick detection.
- Four choices are given, each describing a different approach:
  * Choice 1: Identify virus by DNA sequencing, then develop a PCR kit.
  * Choice 2: Identify IgG antibodies, then develop an ELISA kit targeting IgG.
  * Choice 3: Identify virus based on symptoms, then design a nested PCR kit.
  * Choice 4: Identify virus by cDNA sequencing, then develop a real-time PCR kit.
- Key biological entities: virus (retrovirus), viral DNA or cDNA, IgG antibodies.
- Techniques mentioned: DNA sequencing, cDNA sequencing, PCR, nested PCR, real-time PCR, ELISA.

2. Analyze Relationships Between Components:
- Identification methods vary: direct viral genetic material sequencing (DNA or cDNA), antibody detection, or symptom-based inference.
- Diagnostic methods depend on identification: PCR-based methods detect viral genetic material; ELISA detects host antibodies.
- The choice of sequencing (DNA vs cDNA) relates to the retrovirus lifecycle (RNA genome requiring reverse transcription).
- Nested PCR and real-time PCR are advanced PCR techniques enhancing sensitivity and quantification.
- Symptom-based identification is indirect and less specific.
- These conditions influence the diagnostic kit's specificity, sensitivity, and speed.

3. Identify the Field of Study:
- Primary domain: Molecular biology and biotechnology.
- Subfields: Virology, diagnostic assay development, molecular diagnostics.
- Techniques involve genetics (sequencing), immunology (antibody detection), and molecular techniques (PCR variants).
- Applications include clinical diagnostics, epidemiology, and public health.

4. Highlight Aspects Needing Clarification:
- The problem does not specify the viral genome type explicitly (though retrovirus implies RNA genome).
- The rationale for choosing DNA sequencing over cDNA sequencing or vice versa is not detailed.
- The reliability of symptom-based identification is ambiguous.
- The timeline and resource constraints for kit development are not mentioned.
- The problem does not clarify if antibody detection is suitable for early infection stages.
- Potential challenges include differentiating between active infection and past exposure (especially for antibody-based tests) and ensuring rapid turnaround.
============== Task Decomposition ================
{'stage_0': {'subtask_1': {'objective': 'Understand the nature of the retrovirus genome and determine the appropriate sequencing method (DNA sequencing vs cDNA sequencing) to accurately identify the viral genetic material.', 'dependencies': [], 'agent_collaboration': 'SC_CoT'}}, 'stage_1': {'subtask_1': {'objective': 'Integrate knowledge of the viral genome type and sequencing results to select the most suitable molecular diagnostic technique (PCR, nested PCR, real-time PCR, or ELISA) for quick and accurate detection.', 'dependencies': ['subtask_1'], 'agent_collaboration': 'SC_CoT'}, 'subtask_2': {'objective': 'Evaluate the advantages and limitations of each diagnostic method (PCR variants vs ELISA) in the context of retroviral infection, considering factors like detection of viral RNA/DNA vs antibodies, sensitivity, specificity, and speed.', 'dependencies': ['subtask_1'], 'agent_collaboration': 'Reflexion'}}, 'stage_2': {'subtask_1': {'objective': 'Select the optimal diagnostic kit design approach based on the integrated analysis, prioritizing rapid, sensitive, and specific detection of the retrovirus in clinical samples.', 'dependencies': ['stage_1.subtask_1', 'stage_1.subtask_2'], 'agent_collaboration': 'Debate'}}}
============== Concretized MAS ================
async def forward_156(self, taskInfo):
    print("Task Requirement: ", taskInfo)
    logs = []

    cot_sc_instruction_stage0 = (
        "Sub-task 1: Understand the nature of the retrovirus genome and determine the appropriate sequencing method (DNA sequencing vs cDNA sequencing) to accurately identify the viral genetic material, with context from the query."
    )
    final_decision_instruction_stage0 = (
        "Sub-task 1: Synthesize and choose the most consistent answer for the appropriate sequencing method for retrovirus genome identification."
    )
    cot_sc_desc_stage0 = {
        'instruction': cot_sc_instruction_stage0,
        'final_decision_instruction': final_decision_instruction_stage0,
        'input': [taskInfo],
        'temperature': 0.5,
        'context_desc': ["user query"]
    }
    results_stage0, log_stage0 = await self.sc_cot(
        subtask_id="stage_0.subtask_1",
        cot_agent_desc=cot_sc_desc_stage0,
        n_repeat=self.max_sc
    )
    logs.append(log_stage0)

    cot_sc_instruction_stage1_sub1 = (
        "Sub-task 1: Integrate knowledge of the viral genome type and sequencing results from stage 0 to select the most suitable molecular diagnostic technique (PCR, nested PCR, real-time PCR, or ELISA) for quick and accurate detection."
    )
    final_decision_instruction_stage1_sub1 = (
        "Sub-task 1: Synthesize and choose the most consistent molecular diagnostic technique based on viral genome type and sequencing results."
    )
    cot_sc_desc_stage1_sub1 = {
        'instruction': cot_sc_instruction_stage1_sub1,
        'final_decision_instruction': final_decision_instruction_stage1_sub1,
        'input': [taskInfo, results_stage0['thinking'], results_stage0['answer']],
        'temperature': 0.5,
        'context_desc': ["user query", "thinking of stage_0.subtask_1", "answer of stage_0.subtask_1"]
    }
    results_stage1_sub1, log_stage1_sub1 = await self.sc_cot(
        subtask_id="stage_1.subtask_1",
        cot_agent_desc=cot_sc_desc_stage1_sub1,
        n_repeat=self.max_sc
    )
    logs.append(log_stage1_sub1)

    cot_reflect_instruction_stage1_sub2 = (
        "Sub-task 2: Evaluate the advantages and limitations of each diagnostic method (PCR variants vs ELISA) in the context of retroviral infection, considering factors like detection of viral RNA/DNA vs antibodies, sensitivity, specificity, and speed."
    )
    critic_instruction_stage1_sub2 = (
        "Please review and provide the limitations of provided solutions of diagnostic methods for retroviral infection detection."
    )
    cot_reflect_desc_stage1_sub2 = {
        'instruction': cot_reflect_instruction_stage1_sub2,
        'critic_instruction': critic_instruction_stage1_sub2,
        'input': [taskInfo, results_stage0['thinking'], results_stage0['answer'], results_stage1_sub1['thinking'], results_stage1_sub1['answer']],
        'temperature': 0.0,
        'context_desc': ["user query", "thinking of stage_0.subtask_1", "answer of stage_0.subtask_1", "thinking of stage_1.subtask_1", "answer of stage_1.subtask_1"]
    }
    results_stage1_sub2, log_stage1_sub2 = await self.reflexion(
        subtask_id="stage_1.subtask_2",
        reflect_desc=cot_reflect_desc_stage1_sub2,
        n_repeat=self.max_round
    )
    logs.append(log_stage1_sub2)

    debate_instruction_stage2 = (
        "Sub-task 1: Select the optimal diagnostic kit design approach based on the integrated analysis from stage 1 subtasks, prioritizing rapid, sensitive, and specific detection of the retrovirus in clinical samples."
    )
    final_decision_instruction_stage2 = (
        "Sub-task 1: Select the optimal diagnostic kit design approach for quick and accurate retrovirus detection."
    )
    debate_desc_stage2 = {
        'instruction': debate_instruction_stage2,
        'final_decision_instruction': final_decision_instruction_stage2,
        'input': [taskInfo, results_stage1_sub1['thinking'], results_stage1_sub1['answer'], results_stage1_sub2['thinking'], results_stage1_sub2['answer']],
        'context_desc': ["user query", "thinking of stage_1.subtask_1", "answer of stage_1.subtask_1", "thinking of stage_1.subtask_2", "answer of stage_1.subtask_2"],
        'temperature': 0.5
    }
    results_stage2, log_stage2 = await self.debate(
        subtask_id="stage_2.subtask_1",
        debate_desc=debate_desc_stage2,
        n_repeat=self.max_round
    )
    logs.append(log_stage2)

    final_answer = await self.make_final_answer(results_stage2['thinking'], results_stage2['answer'])
    return final_answer, logs
