{
    "objective": [
        "Calculate Aya's walking speed s based on the information that when she walks at s km/h, the walk takes 4 hours including t minutes spent in the coffee shop.",
        "Determine the time spent in the coffee shop t using the information that when she walks at s+2 km/h, the walk takes 2 hours and 24 minutes including t minutes in the coffee shop.",
        "Calculate the time it takes for Aya to walk 9 km at s+1/2 km/h, including the t minutes spent in the coffee shop.",
        "Calculate the power of point D with respect to circle ω using the tangents from D to points B and C.",
        "Determine the length of segment AD using the power of point D and the given side lengths of triangle ABC.",
        "Calculate the length of segment AP using the outputs from subtasks 1 and 2, applying the intersecting chords theorem or the power of a point theorem.",
        "Convert the length of AP into the form m/n and find the sum m + n.",
        "Calculate the total number of ways to color the vertices of the octagon.",
        "Identify the number of colorings that allow for a rotation such that all blue vertices map to positions originally occupied by red vertices.",
        "Calculate the probability that a valid rotation exists based on the outputs of Sub-task 1 and Sub-task 2.",
        "Simplify the probability fraction obtained in Sub-task 3 and ensure that m and n are relatively prime, then find m+n.",
        "Analyze the function f(x)=|| x|-\tfrac{1}{2}| and determine its behavior and range.",
        "Analyze the function g(x)=|| x|-\tfrac{1}{4}| and determine its behavior and range.",
        "Determine the transformation g(f(x)) for any input x based on the outputs from sub-tasks 1 and 2.",
        "Analyze the function y=4 g(f(sin(2πx))) and determine its behavior and range.",
        "Analyze the function x=4 g(f(cos(3πy))) and determine its behavior and range.",
        "Find the intersection points of the graphs of y=4 g(f(sin(2πx))) and x=4 g(f(cos(3πy))).",
        "Identify the least prime number p such that there exists a positive integer n where n^4 + 1 is divisible by p^2.",
        "Find the smallest positive integer m such that m^4 + 1 is divisible by p^2, based on the output of subtask 1.",
        "Calculate the volume of the tetrahedron using the given edge lengths with the Cayley-Menger determinant.",
        "Determine the formula for the distance from a point inside the tetrahedron to its faces based on the volume calculated in sub-task 1.",
        "Find the specific distance from the point to the faces in terms of m√n/p and identify the values of m, n, and p.",
        "Sum the values of m, n, and p obtained from sub-task 3 to get the final answer.",
        "Find all sets of dimensions (length, width, height) of a rectangular box with surface area 54 and volume 23.",
        "Calculate the diagonal of each box using the dimensions obtained from subtask 1.",
        "Find the minimum radius of the sphere that can contain the box and calculate its square.",
        "Simplify the fraction representing r^2 and find the sum of the numerator and denominator.",
        "Derive equations from the given logarithmic conditions \\(\\log_x(y^x) = \\log_y(x^{4y}) = 10\\) and express them in terms of \\(x\\) and \\(y\\).",
        "Solve the equations derived in subtask 1 to find expressions or values for \\(x\\) and \\(y\\).",
        "Calculate the product \\(xy\\) based on the values obtained from subtask 2, ensuring the calculation is consistent by using multiple reasoning paths.",
        "Determine the losing positions for Alice where any move leaves Bob in a winning position.",
        "Based on the losing positions for Alice from Sub-task 1, determine the winning positions for Bob.",
        "Based on the winning positions for Bob from Sub-task 2, count the number of such positions up to 2024.",
        "Calculate the total number of ways Jen can pick 4 distinct numbers from the set S = {1, 2, 3, ..., 10}.",
        "Determine the number of ways to pick 4 numbers from S such that at least 2 of them match with Jen's chosen numbers.",
        "Calculate the probability of winning a prize (at least 2 matches) based on the outputs from subtasks 1 and 2.",
        "Calculate the number of ways to pick 4 numbers from S such that all 4 of them match with Jen's chosen numbers.",
        "Calculate the probability of winning the grand prize (all 4 matches) based on the outputs from subtasks 3 and 4.",
        "Find m and n such that the probability of winning the grand prize given a prize is m/n, and compute m+n.",
        "Identify the geometric relationships and properties of the given rectangles and circle.",
        "Calculate the lengths of line segments based on the given dimensions of the rectangles.",
        "Use the properties of the circle and rectangles to deduce the length of CE.",
        "Determine the possible configurations of direction changes for a path of length 16 on an 8x8 grid.",
        "Calculate the number of valid paths for each configuration of direction changes determined in subtask 1.",
        "Aggregate the results from subtask 2 to find the total number of paths that change direction exactly four times.",
        "Determine the parametric representation of the complex number z given |z|=4. Express z in terms of a parameter θ such that z = 4e^{iθ}.",
        "Substitute the parametric form of z into the original expression and simplify it to express the real part as a function of θ.",
        "Analyze the function obtained from subtask 2 to find the value of θ that maximizes the real part.",
        "Calculate the total length of the path formed by eight circles of radius 34 that are sequentially tangent.",
        "Calculate the total length of the path formed by 2024 circles of radius 1 arranged in the same manner as the circles of radius 34.",
        "Determine the ratio of the total lengths of the paths formed by the circles of radius 34 and radius 1.",
        "Use the ratio obtained from subtask 3 and properties of the circles to find the inradius of triangle ABC.",
        "Express the inradius as a fraction in simplest form and find the sum of the numerator and denominator.",
        "Determine the equations of the diagonals of the rhombus, which intersect at the origin and are aligned with the axes of the hyperbola.",
        "Calculate the coordinates of points A, B, C, and D using the equations of the diagonals and the condition that these points lie on the hyperbola.",
        "Compute BD^2 and determine the greatest real number less than BD^2 for all such rhombi.",
        "Calculate the number of residents owning at least one of the three items: diamond ring, golf clubs, and garden spade.",
        "Determine the number of residents owning exactly two of the three items using the data provided.",
        "Calculate the number of residents owning exactly three of the three items.",
        "Calculate the number of residents owning all four items, including the bag of candy hearts.",
        "Calculate the area of triangle ABC using the circumradius R = 13 and inradius r = 6, applying the formula A = r × s, where s is the semi-perimeter.",
        "Determine the semi-perimeter s of triangle ABC based on the output of Sub-task 1, which provides the area of the triangle.",
        "Calculate the product AB · AC using the semi-perimeter and area obtained from Sub-tasks 1 and 2, while considering the condition that line IA is perpendicular to line OI.",
        "Generate all possible triples of nonnegative integers (a, b, c) such that the sum a + b + c equals 300.",
        "Filter the generated triples (a, b, c) from subtask 1 to find those that satisfy the equation a^2b + a^2c + b^2a + b^2c + c^2a + c^2b = 6,000,000.",
        "Determine the equation of the line segment AB and find the parametric representation of any point C on AB.",
        "Determine the constraints for a segment PQ of unit length lying in the first quadrant with P on the x-axis and Q on the y-axis.",
        "Find the unique point C on line segment AB that satisfies the condition of not belonging to any segment from the family of segments except for AB.",
        "Calculate OC^2 and express it in the form of p/q where p and q are relatively prime positive integers.",
        "Calculate the expression 2 - 2*omega^k + omega^(2k) for each k from 0 to 12.",
        "Compute the product of all terms calculated in sub-task 1.",
        "Find the remainder when the product from sub-task 2 is divided by 1000.",
        "Determine the properties of a b-beautiful integer, including how it is expressed in base b and verifying the sum of its digits equals the square root of the integer.",
        "Calculate the range of possible b-beautiful integers for a given base b based on the properties identified in subtask 1.",
        "Count the number of b-beautiful integers for each base b and identify the smallest base b for which there are more than ten such integers.",
        "Identify the vertices of the dodecagon and list all possible diagonals.",
        "Calculate possible pairs of parallel lines (sides or diagonals) that can form rectangles.",
        "Count the number of rectangles formed by ensuring the selected pairs form a closed rectangle shape.",
        "Identify the constraints and properties of the list based on the problem statement, including the sum, mode, and median requirements.",
        "Generate possible lists that satisfy the identified constraints from subtask 1.",
        "Calculate the sum of the squares of the items in the lists generated in subtask 2.",
        "Identify all possible combinations of digits for the top row that form a three-digit number.",
        "Identify all possible combinations of digits for the bottom row that form a three-digit number.",
        "Find combinations where the sum of the two numbers formed by reading left to right is 999.",
        "Find combinations where the sum of the three numbers formed by reading top to bottom is 99.",
        "Identify the common combinations that satisfy both the left-to-right and top-to-bottom sum conditions.",
        "Solve for x in terms of y and z given the equation log2(x/(yz)) = 1/2.",
        "Solve for y in terms of x and z given the equation log2(y/(xz)) = 1/3.",
        "Solve for z in terms of x and y given the equation log2(z/(xy)) = 1/4.",
        "Compute the absolute value of log2(x^4y^3z^2) using the results from subtasks 1, 2, and 3.",
        "Verify and refine the solution for |log2(x^4y^3z^2)| to ensure its correctness.",
        "Identify the properties of the hexagon ABCDEF, specifically determining the implications of it being convex, equilateral, and having pairs of opposite sides parallel.",
        "Determine how the side lengths of the triangle, formed by extending segments AB, CD, and EF, relate to the side length of the hexagon.",
        "Calculate the side length of the hexagon ABCDEF based on the output from subtask 2.",
        "Determine the relationship between the number of sets Bob can list and the elements of set A.",
        "Calculate the specific elements of set A that result in 2024 subsets.",
        "Sum the elements of set A based on the outputs from subtasks 1 and 2.",
        "Identify the constraints for a four-digit integer N such that changing any digit to 1 results in a number divisible by 7.",
        "Find the greatest four-digit integer N that satisfies the constraints identified in Sub-task 1.",
        "Calculate the quotient Q and remainder R when the greatest integer N from Sub-task 2 is divided by 1000.",
        "Compute the sum Q + R based on the values of Q and R obtained from Sub-task 3.",
        "Calculate the radius of the torus and its revolution distance based on the given parameters.",
        "Determine the conditions for tangency between the torus and the sphere.",
        "Calculate the difference between the radii of the circles of tangency.",
        "Simplify the expression for the difference and find the sum of the numerator and denominator when expressed as a fraction in simplest form.",
        "Determine the maximum number of rows and columns that can be filled with chips of a single color without violating the conditions.",
        "Calculate the total number of chips that can be placed without violating the conditions based on the output of sub-task 1.",
        "Verify that the placement is optimal and that any additional chip would violate the conditions based on the outputs of sub-tasks 1 and 2."
    ],
    "subtask_name": [
        "determine_variable_from_composite_measure",
        "determine_offset_from_composite_measure",
        "compute_composite_measure_for_new_condition",
        "determine_offset_from_composite_measure",
        "determine_variable_from_composite_measure",
        "compute_composite_measure_for_new_condition",
        "express_metric_as_ratio_sum",
        "aggregate_configuration_count",
        "aggregate_constrained_configurations",
        "derive_relative_measure",
        "express_metric_as_ratio_sum",
        "derive_relative_measure",
        "derive_relative_measure",
        "compute_composite_measure_for_new_condition",
        "determine_transformed_output_range",
        "determine_transformed_output_range",
        "find_matching_configurations",
        "find_minimal_element_satisfying_condition",
        "determine_variable_from_composite_measure",
        "compute_composite_measure_for_new_condition",
        "determine_variable_from_composite_measure",
        "determine_symbolic_parameters",
        "aggregate_input_values",
        "find_matching_configurations",
        "derive_relative_measure",
        "find_minimal_element_satisfying_condition",
        "express_metric_as_ratio_sum",
        "determine_symbolic_parameters",
        "find_matching_configurations",
        "aggregate_input_values",
        "find_matching_configurations",
        "derive_complement_group",
        "aggregate_configuration_count",
        "aggregate_configuration_count",
        "aggregate_constrained_configurations",
        "derive_relative_measure",
        "find_matching_configurations",
        "derive_relative_measure",
        "express_metric_as_ratio_sum",
        "determine_symbolic_parameters",
        "aggregate_input_values",
        "determine_variable_from_composite_measure",
        "find_matching_configurations",
        "aggregate_configuration_count",
        "aggregate_input_values",
        "determine_symbolic_parameters",
        "derive_relative_measure",
        "find_optimal_parameter_value",
        "aggregate_input_values",
        "compute_composite_measure_for_new_condition",
        "derive_relative_measure",
        "determine_variable_from_composite_measure",
        "express_metric_as_ratio_sum",
        "determine_symbolic_parameters",
        "find_matching_configurations",
        "determine_transformed_output_range",
        "aggregate_input_values",
        "aggregate_constrained_configurations",
        "aggregate_constrained_configurations",
        "determine_variable_from_composite_measure",
        "aggregate_input_values",
        "determine_variable_from_composite_measure",
        "compute_composite_measure_for_new_condition",
        "aggregate_constrained_configurations",
        "find_matching_configurations",
        "determine_symbolic_parameters",
        "find_matching_configurations",
        "find_exclusive_configuration",
        "determine_variable_from_composite_measure",
        "generate_sequence_of_values",
        "aggregate_input_values",
        "compute_modular_remainder",
        "verify_component_relation",
        "generate_sequence_of_values",
        "find_minimal_element_satisfying_condition",
        "find_matching_configurations",
        "identify_compatible_pairs",
        "aggregate_configuration_count",
        "derive_condition_definitions",
        "find_matching_configurations",
        "compute_composite_measure_for_new_condition",
        "generate_sequence_of_values",
        "generate_sequence_of_values",
        "identify_compatible_pairs",
        "find_matching_configurations",
        "find_common_configurations",
        "determine_variable_from_composite_measure",
        "determine_variable_from_composite_measure",
        "determine_variable_from_composite_measure",
        "determine_transformed_composite_value",
        "verify_component_relation",
        "derive_condition_definitions",
        "determine_variable_from_composite_measure",
        "determine_transformed_composite_value",
        "aggregate_configuration_count",
        "determine_variable_from_composite_measure",
        "aggregate_input_values",
        "derive_condition_definitions",
        "find_optimal_parameter_value",
        "compute_modular_remainder",
        "aggregate_input_values",
        "determine_symbolic_parameters",
        "derive_condition_definitions",
        "derive_relative_measure",
        "express_metric_as_ratio_sum",
        "find_optimal_parameter_value",
        "aggregate_configuration_count",
        "verify_optimality_under_constraint"
    ],
    "subtask_abstracted_objective": [
        "Determine the value of a primary variable by resolving a specified total as the aggregate of its contribution and a constant overhead under an initial condition.",
        "Determine the value of the constant overhead by resolving a specified total as the aggregate of a modified primary variable’s contribution and the overhead under a second condition.",
        "Compute the final total measure under a third condition by aggregating the contribution of an adjusted primary variable with the constant overhead.",
        "Compute an intermediate metric by aggregating two identical input values.",
        "Resolve a target variable by equating a known composite metric with a given primary input.",
        "Compute a composite metric under a modified condition by combining an adjusted variable with a constant metric.",
        "Express a computed metric as a simplified ratio and calculate the sum of its numerator and denominator.",
        "Compute the total count of all possible assignments for a fixed number of binary choices.",
        "Count the number of assignments that satisfy a specified mapping constraint under a transformation.",
        "Compute the ratio of constrained assignments to the total assignments to quantify the proportion meeting the constraint.",
        "Simplify a computed ratio to its lowest terms and calculate the sum of its numerator and denominator.",
        "Determine the output bounds of a transformation that computes the difference between a derived input value and a fixed parameter.",
        "Determine the output bounds of a similar difference-based transformation using an alternate fixed parameter.",
        "Define a new transformation by composing one derived operation with another and describe its output characteristics.",
        "Determine the output range of a scaled composite transformation when applied after a specified input modification.",
        "Determine the output range of a scaled composite transformation when applied after an alternative input modification.",
        "Identify all configurations where two distinct transformed relationships coincide.",
        "Determine the minimal primary parameter value for which there exists an auxiliary input such that a composite computation with that auxiliary input satisfies a squared-parameter-based condition.",
        "Determine the minimal auxiliary input for which a composite computation with that input satisfies a squared-parameter-based condition for a specified parameter.",
        "Combine a set of input measures into a single composite value using a multi-dimensional aggregation technique.",
        "Derive a dependent variable expression by relating the composite value to an internal parameter.",
        "Resolve a symbolic expression of the derived variable into a minimal set of integer parameters under simplification constraints.",
        "Aggregate the identified integer parameters into a single scalar result by summation.",
        "Enumerate all parameter configurations that satisfy two specified functional constraints.",
        "Compute a derived measure by applying a defined transformation to each identified configuration.",
        "Identify the minimal value among computed measures under a selection criterion and apply a transformation to it.",
        "Simplify a rational representation of a computed metric and compute the sum of its numerator and denominator.",
        "Formulate symbolic criteria relating unspecified inputs based on given equivalence conditions.",
        "Identify input values that satisfy a set of symbolic criteria.",
        "Compute a composite value by applying an aggregation operation to selected inputs.",
        "Identify all elements in a domain such that every transformation from a predefined collection produces a result within a designated subset.",
        "Identify all elements of a domain that do not belong to a specified subset.",
        "Count the number of elements in a given set whose values fall within a specified bound.",
        "Calculate the total count of unique subsets of a specified size that can be formed from an input set of distinct elements.",
        "Compute the number of subsets of a specified size drawn from an input set that satisfy a minimum overlap constraint with a given reference subset.",
        "Compute the ratio of a constrained subset count to the total subset count to determine the relative frequency of meeting the overlap constraint.",
        "Compute the number of subsets of a specified size drawn from an input set that exactly match a given reference subset.",
        "Compute the ratio of the exact-match subset count to the total subset count to determine the relative frequency of complete matching.",
        "Simplify a given ratio of two integers to lowest terms and compute the sum of its numerator and denominator.",
        "Formulate functional relationships among provided elements by identifying all underlying constraints and interdependencies.",
        "Compute intermediate measure values by applying specified numeric transformations to input parameters.",
        "Derive a target numeric variable by relating composite measures through the established functional relationships.",
        "Enumerate all component arrangements that satisfy a specified count constraint.",
        "For each identified arrangement, compute the count of distinct assignments meeting the arrangement’s criteria.",
        "Sum the computed counts across all arrangements to produce a total measure.",
        "Represent a variable subject to a fixed-value constraint using a single free parameter.",
        "Substitute the parameterized representation into a composite expression and simplify to express a target component as a function of the parameter.",
        "Identify the value of the free parameter that optimizes (maximizes or minimizes) the previously derived function component.",
        "Compute the sum of a specified measure applied uniformly to each element in a sequence of items.",
        "Compute the sum of a specified measure applied uniformly to each element in a second sequence of items under the same arrangement rules but with a different uniform parameter.",
        "Compute the ratio of two previously obtained aggregate measures.",
        "Derive an unknown variable by relating it through a functional expression to a given composite ratio.",
        "Simplify a given ratio to lowest terms and compute the sum of its numerator and denominator.",
        "Formulate symbolic expressions for two intersecting linear relations centered at a reference point, subject to orientation constraints.",
        "Identify all variable tuples that satisfy a given set of linear relation expressions and an additional constraint relation.",
        "Compute a composite measure for each valid configuration and identify the maximal value that is strictly less than those computed measures.",
        "Combine multiple input measures to compute a composite aggregate measure.",
        "Compute the count of entities that satisfy exactly two of the provided conditions.",
        "Compute the count of entities that satisfy exactly three of the provided conditions.",
        "Determine the value of a target variable by relating it to existing composite measures.",
        "Combine two provided numeric inputs by applying a multiplicative operation to produce an intermediate measure.",
        "Compute an unknown numeric variable by dividing a known composite measure by a specified numeric parameter.",
        "Derive a target numeric measure by combining two intermediate values while satisfying an additional constraint condition.",
        "Enumerate all variable tuples that satisfy a given sum constraint over nonnegative values.",
        "Select from a provided set of tuples those that fulfill a specified composite expression equality constraint.",
        "Represent an entity constrained to lie along a linear relation by introducing a single symbolic parameter.",
        "Identify all pairs of values that satisfy a fixed combined measure alongside independent domain constraints.",
        "Determine the parameter value for which a configuration uniquely satisfies an exclusivity condition against a family of configurations.",
        "Compute a composite measure for a specific parameter value and express the result as a reduced quotient of two integers.",
        "Compute a sequence of intermediate values by evaluating a composite expression for each element across a fixed index range.",
        "Combine a set of intermediate values by computing their product.",
        "Calculate the remainder when an aggregate numeric result is divided by a specified modulus.",
        "Identify a representation scheme for a given input and verify that a function of its components equals a specified transformation of the input.",
        "Generate a sequence of values within a specified domain that satisfy predetermined component-based conditions.",
        "Count the number of values satisfying a set of conditions for each parameter and determine the smallest parameter for which the count exceeds a threshold.",
        "Enumerate all distinct pairs of elements from a given set that satisfy a specified exclusion constraint.",
        "From a provided list of element combinations, select all unordered pairs of combinations that satisfy a given compatibility condition.",
        "Count the number of composite groupings from a set of defined element combinations that satisfy a closure condition.",
        "Extract and formalize all specified composite and uniqueness conditions from the input description.",
        "Enumerate all configurations that meet a given set of formalized conditions.",
        "For each configuration, compute a specified composite measure by applying a defined transformation across its elements.",
        "Enumerate all ordered sequences of fixed length drawn from a specified input set.",
        "Enumerate all ordered sequences of fixed length drawn from a specified input set.",
        "Select all pairs of ordered sequences whose combined binary aggregation equals a specified value.",
        "Select all pairs of ordered sequences where an element-wise aggregation across positions, followed by a cumulative aggregation, equals a specified value.",
        "Identify the common configurations that appear in two filtered sets, each defined by a separate aggregation condition.",
        "Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "Compute a transformation of a composite expression formed by combining multiple variables.",
        "Validate and, if necessary, refine a computed value to ensure it meets specified criteria.",
        "Extract and formalize structural and uniformity constraints from an input description containing multiple elements and pairwise relationships.",
        "Establish a functional relationship by expressing an intrinsic measure as a transformation of a set of provided composite measurements.",
        "Compute a target value by applying a specified transformation function to given measurements according to a predefined relationship.",
        "Express the relationship between an aggregate count of configurations and the defining input values.",
        "Identify input values that satisfy a specified aggregate count constraint.",
        "Compute the sum of a set of input values.",
        "Extract and formalize conditions such that for each individual element position in an ordered sequence, substituting with a defined placeholder value yields a result satisfying a specified property.",
        "Identify the highest-valued element within an input domain that meets a defined set of formalized conditions.",
        "Compute the integer division result and associated residual value when an input quantity is partitioned by a given divisor.",
        "Calculate the combined total of two specified numeric values.",
        "Compute derived parameter values from given inputs.",
        "Establish formal conditions that relate input parameters to a target relationship.",
        "Compute the difference between two derived numeric measures.",
        "Simplify a numeric measure into a reduced ratio and calculate the sum of its numerator and denominator.",
        "Determine the maximal number of subcollections that can be uniformly assigned a single attribute under a uniformity constraint.",
        "Compute the total count of elements that can be assigned given a grouping count constraint under a uniformity rule.",
        "Confirm that the current assignment is maximal, such that adding any additional element would violate the uniformity constraint."
    ],
    "merge_subtask": [
        "determine_variable_from_composite_measure: Determine the value of a primary variable by resolving a specified total as the aggregate of its contribution and a constant overhead under an initial condition.",
        "determine_offset_from_composite_measure: Determine the value of the constant overhead by resolving a specified total as the aggregate of a modified primary variable’s contribution and the overhead under a second condition.",
        "compute_composite_measure_for_new_condition: Compute the final total measure under a third condition by aggregating the contribution of an adjusted primary variable with the constant overhead.",
        "determine_offset_from_composite_measure: Compute an intermediate metric by aggregating two identical input values.",
        "determine_variable_from_composite_measure: Resolve a target variable by equating a known composite metric with a given primary input.",
        "compute_composite_measure_for_new_condition: Compute a composite metric under a modified condition by combining an adjusted variable with a constant metric.",
        "express_metric_as_ratio_sum: Express a computed metric as a simplified ratio and calculate the sum of its numerator and denominator.",
        "aggregate_configuration_count: Compute the total count of all possible assignments for a fixed number of binary choices.",
        "aggregate_constrained_configurations: Count the number of assignments that satisfy a specified mapping constraint under a transformation.",
        "derive_relative_measure: Compute the ratio of constrained assignments to the total assignments to quantify the proportion meeting the constraint.",
        "express_metric_as_ratio_sum: Simplify a computed ratio to its lowest terms and calculate the sum of its numerator and denominator.",
        "derive_relative_measure: Determine the output bounds of a transformation that computes the difference between a derived input value and a fixed parameter.",
        "derive_relative_measure: Determine the output bounds of a similar difference-based transformation using an alternate fixed parameter.",
        "compute_composite_measure_for_new_condition: Define a new transformation by composing one derived operation with another and describe its output characteristics.",
        "determine_transformed_output_range: Determine the output range of a scaled composite transformation when applied after a specified input modification.",
        "determine_transformed_output_range: Determine the output range of a scaled composite transformation when applied after an alternative input modification.",
        "find_matching_configurations: Identify all configurations where two distinct transformed relationships coincide.",
        "find_minimal_element_satisfying_condition: Determine the minimal primary parameter value for which there exists an auxiliary input such that a composite computation with that auxiliary input satisfies a squared-parameter-based condition.",
        "determine_variable_from_composite_measure: Determine the minimal auxiliary input for which a composite computation with that input satisfies a squared-parameter-based condition for a specified parameter.",
        "compute_composite_measure_for_new_condition: Combine a set of input measures into a single composite value using a multi-dimensional aggregation technique.",
        "determine_variable_from_composite_measure: Derive a dependent variable expression by relating the composite value to an internal parameter.",
        "determine_symbolic_parameters: Resolve a symbolic expression of the derived variable into a minimal set of integer parameters under simplification constraints.",
        "aggregate_input_values: Aggregate the identified integer parameters into a single scalar result by summation.",
        "find_matching_configurations: Enumerate all parameter configurations that satisfy two specified functional constraints.",
        "derive_relative_measure: Compute a derived measure by applying a defined transformation to each identified configuration.",
        "find_minimal_element_satisfying_condition: Identify the minimal value among computed measures under a selection criterion and apply a transformation to it.",
        "express_metric_as_ratio_sum: Simplify a rational representation of a computed metric and compute the sum of its numerator and denominator.",
        "determine_symbolic_parameters: Formulate symbolic criteria relating unspecified inputs based on given equivalence conditions.",
        "find_matching_configurations: Identify input values that satisfy a set of symbolic criteria.",
        "aggregate_input_values: Compute a composite value by applying an aggregation operation to selected inputs.",
        "find_matching_configurations: Identify all elements in a domain such that every transformation from a predefined collection produces a result within a designated subset.",
        "derive_complement_group: Identify all elements of a domain that do not belong to a specified subset.",
        "aggregate_configuration_count: Count the number of elements in a given set whose values fall within a specified bound.",
        "aggregate_configuration_count: Calculate the total count of unique subsets of a specified size that can be formed from an input set of distinct elements.",
        "aggregate_constrained_configurations: Compute the number of subsets of a specified size drawn from an input set that satisfy a minimum overlap constraint with a given reference subset.",
        "derive_relative_measure: Compute the ratio of a constrained subset count to the total subset count to determine the relative frequency of meeting the overlap constraint.",
        "find_matching_configurations: Compute the number of subsets of a specified size drawn from an input set that exactly match a given reference subset.",
        "derive_relative_measure: Compute the ratio of the exact-match subset count to the total subset count to determine the relative frequency of complete matching.",
        "express_metric_as_ratio_sum: Simplify a given ratio of two integers to lowest terms and compute the sum of its numerator and denominator.",
        "determine_symbolic_parameters: Formulate functional relationships among provided elements by identifying all underlying constraints and interdependencies.",
        "aggregate_input_values: Compute intermediate measure values by applying specified numeric transformations to input parameters.",
        "determine_variable_from_composite_measure: Derive a target numeric variable by relating composite measures through the established functional relationships.",
        "find_matching_configurations: Enumerate all component arrangements that satisfy a specified count constraint.",
        "aggregate_configuration_count: For each identified arrangement, compute the count of distinct assignments meeting the arrangement’s criteria.",
        "aggregate_input_values: Sum the computed counts across all arrangements to produce a total measure.",
        "determine_symbolic_parameters: Represent a variable subject to a fixed-value constraint using a single free parameter.",
        "derive_relative_measure: Substitute the parameterized representation into a composite expression and simplify to express a target component as a function of the parameter.",
        "find_optimal_parameter_value: Identify the value of the free parameter that optimizes (maximizes or minimizes) the previously derived function component.",
        "aggregate_input_values: Compute the sum of a specified measure applied uniformly to each element in a sequence of items.",
        "compute_composite_measure_for_new_condition: Compute the sum of a specified measure applied uniformly to each element in a second sequence of items under the same arrangement rules but with a different uniform parameter.",
        "derive_relative_measure: Compute the ratio of two previously obtained aggregate measures.",
        "determine_variable_from_composite_measure: Derive an unknown variable by relating it through a functional expression to a given composite ratio.",
        "express_metric_as_ratio_sum: Simplify a given ratio to lowest terms and compute the sum of its numerator and denominator.",
        "determine_symbolic_parameters: Formulate symbolic expressions for two intersecting linear relations centered at a reference point, subject to orientation constraints.",
        "find_matching_configurations: Identify all variable tuples that satisfy a given set of linear relation expressions and an additional constraint relation.",
        "determine_transformed_output_range: Compute a composite measure for each valid configuration and identify the maximal value that is strictly less than those computed measures.",
        "aggregate_input_values: Combine multiple input measures to compute a composite aggregate measure.",
        "aggregate_constrained_configurations: Compute the count of entities that satisfy exactly two of the provided conditions.",
        "aggregate_constrained_configurations: Compute the count of entities that satisfy exactly three of the provided conditions.",
        "determine_variable_from_composite_measure: Determine the value of a target variable by relating it to existing composite measures.",
        "aggregate_input_values: Combine two provided numeric inputs by applying a multiplicative operation to produce an intermediate measure.",
        "determine_variable_from_composite_measure: Compute an unknown numeric variable by dividing a known composite measure by a specified numeric parameter.",
        "compute_composite_measure_for_new_condition: Derive a target numeric measure by combining two intermediate values while satisfying an additional constraint condition.",
        "aggregate_constrained_configurations: Enumerate all variable tuples that satisfy a given sum constraint over nonnegative values.",
        "find_matching_configurations: Select from a provided set of tuples those that fulfill a specified composite expression equality constraint.",
        "determine_symbolic_parameters: Represent an entity constrained to lie along a linear relation by introducing a single symbolic parameter.",
        "find_matching_configurations: Identify all pairs of values that satisfy a fixed combined measure alongside independent domain constraints.",
        "find_exclusive_configuration: Determine the parameter value for which a configuration uniquely satisfies an exclusivity condition against a family of configurations.",
        "determine_variable_from_composite_measure: Compute a composite measure for a specific parameter value and express the result as a reduced quotient of two integers.",
        "generate_sequence_of_values: Compute a sequence of intermediate values by evaluating a composite expression for each element across a fixed index range.",
        "aggregate_input_values: Combine a set of intermediate values by computing their product.",
        "compute_modular_remainder: Calculate the remainder when an aggregate numeric result is divided by a specified modulus.",
        "verify_component_relation: Identify a representation scheme for a given input and verify that a function of its components equals a specified transformation of the input.",
        "generate_sequence_of_values: Generate a sequence of values within a specified domain that satisfy predetermined component-based conditions.",
        "find_minimal_element_satisfying_condition: Count the number of values satisfying a set of conditions for each parameter and determine the smallest parameter for which the count exceeds a threshold.",
        "find_matching_configurations: Enumerate all distinct pairs of elements from a given set that satisfy a specified exclusion constraint.",
        "identify_compatible_pairs: From a provided list of element combinations, select all unordered pairs of combinations that satisfy a given compatibility condition.",
        "aggregate_configuration_count: Count the number of composite groupings from a set of defined element combinations that satisfy a closure condition.",
        "derive_condition_definitions: Extract and formalize all specified composite and uniqueness conditions from the input description.",
        "find_matching_configurations: Enumerate all configurations that meet a given set of formalized conditions.",
        "compute_composite_measure_for_new_condition: For each configuration, compute a specified composite measure by applying a defined transformation across its elements.",
        "generate_sequence_of_values: Enumerate all ordered sequences of fixed length drawn from a specified input set.",
        "generate_sequence_of_values: Enumerate all ordered sequences of fixed length drawn from a specified input set.",
        "identify_compatible_pairs: Select all pairs of ordered sequences whose combined binary aggregation equals a specified value.",
        "find_matching_configurations: Select all pairs of ordered sequences where an element-wise aggregation across positions, followed by a cumulative aggregation, equals a specified value.",
        "find_common_configurations: Identify the common configurations that appear in two filtered sets, each defined by a separate aggregation condition.",
        "determine_variable_from_composite_measure: Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "determine_variable_from_composite_measure: Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "determine_variable_from_composite_measure: Determine a variable by applying an inverse transformation to a composite of two inputs.",
        "determine_transformed_composite_value: Compute a transformation of a composite expression formed by combining multiple variables.",
        "verify_component_relation: Validate and, if necessary, refine a computed value to ensure it meets specified criteria.",
        "derive_condition_definitions: Extract and formalize structural and uniformity constraints from an input description containing multiple elements and pairwise relationships.",
        "determine_variable_from_composite_measure: Establish a functional relationship by expressing an intrinsic measure as a transformation of a set of provided composite measurements.",
        "determine_transformed_composite_value: Compute a target value by applying a specified transformation function to given measurements according to a predefined relationship.",
        "aggregate_configuration_count: Express the relationship between an aggregate count of configurations and the defining input values.",
        "determine_variable_from_composite_measure: Identify input values that satisfy a specified aggregate count constraint.",
        "aggregate_input_values: Compute the sum of a set of input values.",
        "derive_condition_definitions: Extract and formalize conditions such that for each individual element position in an ordered sequence, substituting with a defined placeholder value yields a result satisfying a specified property.",
        "find_optimal_parameter_value: Identify the highest-valued element within an input domain that meets a defined set of formalized conditions.",
        "compute_modular_remainder: Compute the integer division result and associated residual value when an input quantity is partitioned by a given divisor.",
        "aggregate_input_values: Calculate the combined total of two specified numeric values.",
        "determine_symbolic_parameters: Compute derived parameter values from given inputs.",
        "derive_condition_definitions: Establish formal conditions that relate input parameters to a target relationship.",
        "derive_relative_measure: Compute the difference between two derived numeric measures.",
        "express_metric_as_ratio_sum: Simplify a numeric measure into a reduced ratio and calculate the sum of its numerator and denominator.",
        "find_optimal_parameter_value: Determine the maximal number of subcollections that can be uniformly assigned a single attribute under a uniformity constraint.",
        "aggregate_configuration_count: Compute the total count of elements that can be assigned given a grouping count constraint under a uniformity rule.",
        "verify_optimality_under_constraint: Confirm that the current assignment is maximal, such that adding any additional element would violate the uniformity constraint."
    ],
    "clusters": [
        "4",
        "2",
        "2",
        "2",
        "4",
        "2",
        "3",
        "6",
        "6",
        "5",
        "3",
        "5",
        "5",
        "2",
        "4",
        "4",
        "1",
        "4",
        "4",
        "2",
        "4",
        "4",
        "0",
        "1",
        "5",
        "4",
        "3",
        "4",
        "1",
        "0",
        "1",
        "1",
        "6",
        "6",
        "6",
        "5",
        "1",
        "5",
        "3",
        "4",
        "0",
        "4",
        "1",
        "6",
        "0",
        "4",
        "5",
        "4",
        "0",
        "2",
        "5",
        "4",
        "3",
        "4",
        "1",
        "4",
        "0",
        "6",
        "6",
        "4",
        "0",
        "4",
        "2",
        "6",
        "1",
        "4",
        "1",
        "1",
        "4",
        "0",
        "0",
        "0",
        "4",
        "1",
        "1",
        "1",
        "1",
        "6",
        "5",
        "1",
        "2",
        "6",
        "6",
        "1",
        "1",
        "1",
        "4",
        "4",
        "4",
        "4",
        "5",
        "5",
        "4",
        "4",
        "6",
        "4",
        "0",
        "5",
        "1",
        "3",
        "0",
        "4",
        "5",
        "5",
        "3",
        "6",
        "6",
        "1"
    ],
    "agent_collaboration": [
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "Debate",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "Debate",
        "CoT",
        "CoT",
        "SC_CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "Reflexion",
        "SC_CoT",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "CoT",
        "SC_CoT",
        "SC_CoT",
        "Debate",
        "CoT",
        "CoT",
        "CoT",
        "CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion",
        "Debate",
        "CoT",
        "SC_CoT",
        "Reflexion"
    ],
    "dependencies": [
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_4",
            "subtask_2"
        ],
        [],
        [
            "subtask_2"
        ],
        [
            "subtask_2",
            "subtask_4"
        ],
        [
            "subtask_2"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_5",
            "subtask_5"
        ],
        [
            "subtask_2"
        ],
        [
            "subtask_2"
        ],
        [
            "subtask_4",
            "subtask_4"
        ],
        [],
        [
            "subtask_4"
        ],
        [],
        [
            "subtask_2"
        ],
        [
            "subtask_2",
            "subtask_4"
        ],
        [
            "subtask_2",
            "subtask_4",
            "subtask_4"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_5"
        ],
        [
            "subtask_4"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_6"
        ],
        [
            "subtask_5",
            "subtask_1"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_4",
            "subtask_0"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_2"
        ],
        [
            "subtask_5"
        ],
        [
            "subtask_4"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_6"
        ],
        [
            "subtask_0",
            "subtask_6",
            "subtask_6"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0",
            "subtask_4"
        ],
        [],
        [
            "subtask_6"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_4",
            "subtask_1"
        ],
        [
            "subtask_4",
            "subtask_1",
            "subtask_1"
        ],
        [],
        [
            "subtask_0"
        ],
        [
            "subtask_0"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_1"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_1"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ],
        [
            "subtask_1",
            "subtask_1"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_4",
            "subtask_4"
        ],
        [
            "subtask_4",
            "subtask_4",
            "subtask_4"
        ],
        [
            "subtask_4"
        ],
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_4"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_4"
        ],
        [],
        [
            "subtask_5"
        ],
        [
            "subtask_1"
        ],
        [
            "subtask_3"
        ],
        [],
        [
            "subtask_4"
        ],
        [
            "subtask_5"
        ],
        [
            "subtask_5"
        ],
        [],
        [
            "subtask_6"
        ],
        [
            "subtask_6",
            "subtask_6"
        ]
    ]
}