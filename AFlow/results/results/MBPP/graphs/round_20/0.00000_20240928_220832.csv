question,prediction,expected_output,score,cost
"Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/

def count_rotation(arr):   ",,"
Correct Solution:
def def count_rotation(arr):   
    for i in range (1,len(arr)): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",0,0
"Write a function to multiply two integers.

def multiply_int(x, y):",,"
Correct Solution:
def def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",0,0
"Write a function to convert a given string to a tuple of characters.

def string_to_tuple(str1):",,"
Correct Solution:
def def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",0,0
"Write a python function to check whether the given number can be represented as the difference of two squares or not.

def dif_Square(n): ",,"
Correct Solution:
def def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",0,0
"Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php
import bisect
def left_insertion(a, x):",,"
Correct Solution:
def import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",0,0
"Write a python function to find the length of the longest sublists.

def Find_Max_Length(lst):  ",,"
Correct Solution:
def def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",0,0
"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.

def validate(n): ",,"
Correct Solution:
def def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",0,0
"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).

def sequential_search(dlist, item):",,"
Correct Solution:
def def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",0,0
"Write a function to return the sum of all divisors of a number.

def sum_div(number):",,"
Correct Solution:
def def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",0,0
"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.

def large_product(nums1, nums2, N):",,"
Correct Solution:
def def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",0,0
"Write a function to remove tuples from the given tuple.

def remove_nested(test_tup):",,"
Correct Solution:
def def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",0,0
"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.

def max_product_tuple(list1):",,"
Correct Solution:
def def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",0,0
"Write a python function to find whether the parity of a given number is odd.

def find_Parity(x): ",,"
Correct Solution:
def def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",0,0
"Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.

def left_rotate(n,d):   ",,"
Correct Solution:
def def left_rotate(n,d):   
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d))  ",0,0
"Write a function to find the surface area of a sphere.
import math
def surfacearea_sphere(r):",,"
Correct Solution:
def import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",0,0
"Write a function to find the n'th star number.

def find_star_num(n): ",,"
Correct Solution:
def def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",0,0
"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.

def multiply_elements(test_tup):",,"
Correct Solution:
def def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",0,0
"Write a function to get the angle of a complex number.
import cmath
def angle_complex(a,b):",,"
Correct Solution:
def import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",0,0
"Write a python function to find the volume of a triangular prism.

def find_Volume(l,b,h) : ",,"
Correct Solution:
def def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",0,0
"Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/

def rgb_to_hsv(r, g, b):",,"
Correct Solution:
def def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",0,0
"Write a python function to interchange the first and last elements in a list.

def swap_List(newList): ",,"
Correct Solution:
def def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",0,0
"Write a function to find the median length of a trapezium.

def median_trapezium(base1,base2,height):",,"
Correct Solution:
def def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",0,0
"Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/

def check_min_heap(arr): ",,"
Correct Solution:
def def check_min_heap_helper(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap_helper(arr, 2 * i + 2))
    return left_child and right_child

def check_min_heap(arr):
  return check_min_heap_helper(arr, 0)",0,0
"Write a function to find the kth element in the given array using 1-based indexing.

def kth_element(arr, k):",,"
Correct Solution:
def def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",0,0
"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.

def square_Sum(n):  ",,"
Correct Solution:
def def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",0,0
"Write a python function to find the minimum of two numbers.

def minimum(a,b):   ",,"
Correct Solution:
def def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",0,0
"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.

def rear_extract(test_list):",,"
Correct Solution:
def def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",0,0
"Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
import math 
def is_polite(n): ",,"
Correct Solution:
def import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",0,0
"Write a function to create a list of N empty dictionaries.

def empty_list(length):",,"
Correct Solution:
def def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",0,0
"Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php

def divisible_by_digits(startnum, endnum):",,"
Correct Solution:
def def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",0,0
"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.

def count_X(tup, x): ",,"
Correct Solution:
def def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",0,0
"Write a function to find the maximum product subarray of the given array.

def max_subarray_product(arr):",,"
Correct Solution:
def def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",0,0
"Write a python function to find even numbers from a list of numbers.

def Split(list): ",,"
Correct Solution:
def def Split(list): 
    return [num for num in list if num % 2 == 0]",0,0
"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).

def sum_series(n):",,"
Correct Solution:
def def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",0,0
"Write a function that returns the list in a list of lists whose sum of elements is the highest.

def max_sum_list(lists):",,"
Correct Solution:
def def max_sum_list(lists):
 return max(lists, key=sum)",0,0
"Write a function to calculate whether the matrix is a magic square.

def magic_square_test(my_matrix):",,"
Correct Solution:
def def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",0,0
"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.

def round_and_sum(list1):",,"
Correct Solution:
def def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",0,0
"Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].

def sum_list(lst1,lst2):",,"
Correct Solution:
def def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",0,0
"Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.

def average_tuple(nums):",,"
Correct Solution:
def def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",0,0
"Write a function to find maximum run of uppercase characters in the given string.

def max_run_uppercase(test_str):",,"
Correct Solution:
def def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",0,0
"Write a function to remove odd characters in a string.

def remove_odd(str1):",,"
Correct Solution:
def def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",0,0
"Write a function that takes in the radius and height of a cylinder and returns the the volume.

def volume_cylinder(r,h):",,"
Correct Solution:
def def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",0,0
"Write a function to find the item with maximum frequency in a given list.
from collections import defaultdict
def max_occurrences(nums):",,"
Correct Solution:
def from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",0,0
"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string): ",,"
Correct Solution:
def def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",0,0
"Write a python function to find whether a number is divisible by 11.

def is_Diff(n): ",,"
Correct Solution:
def def is_Diff(n): 
    return (n % 11 == 0) ",0,0
"Write a python function to count the number of non-empty substrings of a given string.

def number_of_substrings(str): ",,"
Correct Solution:
def def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",0,0
"Write a python function to find the sum of non-repeated elements in a given list.

def find_sum(arr): ",,"
Correct Solution:
def def find_sum(arr): 
    arr.sort() 
    sum = arr[0] 
    for i in range(len(arr)-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",0,0
"Write a function to find words that are longer than n characters from a given list of words.

def long_words(n, str):",,"
Correct Solution:
def def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",0,0
"Write a function to remove all whitespaces from the given string.
import re
def remove_whitespaces(text1):",,"
Correct Solution:
def import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",0,0
"Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...

def jacobsthal_num(n): ",,"
Correct Solution:
def def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",0,0
"Write a python function to check if a given number is one less than twice its reverse.

def check_answer(n):    ",,"
Correct Solution:
def def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check_answer(n):    
    return (2 * rev(n) == n + 1)  ",0,0
"Write a python function to count the number of pairs whose xor value is odd.

def find_Odd_Pair(A,N) : ",,"
Correct Solution:
def def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",0,0
"Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.
import heapq
def k_smallest_pairs(nums1, nums2, k):",,"
Correct Solution:
def import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",0,0
"Write a function to find the shared elements from the given two lists.

def similar_elements(test_tup1, test_tup2):",,"
Correct Solution:
def def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",0,0
"Write a python function to count the number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s):",,"
Correct Solution:
def from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",0,0
"Write a function to find the second smallest number in a list.

def second_smallest(numbers):",,"
Correct Solution:
def def second_smallest(numbers):
  unique_numbers = list(set(numbers))
  unique_numbers.sort()
  if len(unique_numbers) < 2:
    return None
  else:
    return unique_numbers[1]",0,0
"Write a function to find the surface area of a cylinder.

def surfacearea_cylinder(r,h):",,"
Correct Solution:
def def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",0,0
"Write a function to convert a snake case string to camel case string.

def snake_to_camel(word):",,"
Correct Solution:
def def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",0,0
"Write a function to return two words from a list of words starting with letter 'p'.
import re
def start_withp(words):",,"
Correct Solution:
def import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",0,0
"Write a function to find the nth hexagonal number.

def hexagonal_num(n): ",,"
Correct Solution:
def def hexagonal_num(n): 
	return n*(2*n - 1) ",0,0
"Write a function to extract the number of unique tuples in the given list.

def extract_freq(test_list):",,"
Correct Solution:
def def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",0,0
"Write a python function to calculate the product of the unique numbers in a given list.

def unique_product(list_data):",,"
Correct Solution:
def def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",0,0
"Write a python function to reverse only the vowels of a given string (where y is not a vowel).

def reverse_vowels(str1):",,"
Correct Solution:
def def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",0,0
"Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr): ",,"
Correct Solution:
def def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",0,0
"Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/

def tuple_to_dict(test_tup):",,"
Correct Solution:
def def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",0,0
"Write a function to find the number of ways to partition a set of Bell numbers.

def bell_number(n):   ",,"
Correct Solution:
def def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",0,0
"Write a python function to get the difference between two lists.

def Diff(li1,li2):",,"
Correct Solution:
def def Diff(li1,li2):
    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))
 ",0,0
"Write a function to find the n'th lucas number.

def find_lucas(n): ",,"
Correct Solution:
def def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",0,0
"Write a python function to find the maximum of two numbers.

def maximum(a,b):   ",,"
Correct Solution:
def def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",0,0
"Write a function to get the frequency of all the elements in a list, returned as a dictionary.
import collections
def freq_count(list1):",,"
Correct Solution:
def import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",0,0
"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).

def get_max_sum (n):",,"
Correct Solution:
def def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",0,0
"Write a python function to find the sum of an array.

def _sum(arr):  ",,"
Correct Solution:
def def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",0,0
"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)

def is_majority(arr, n, x):",,"
Correct Solution:
def def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",0,0
"Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php
import re
def text_match_zero_one(text):",,"
Correct Solution:
def import re
def text_match_zero_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False",0,0
"Write a python function to count the number of equal numbers from three given integers.

def test_three_equal(x,y,z):",,"
Correct Solution:
def def test_three_equal(x,y,z):
  result = set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return 4-len(result)",0,0
"Write a function to get the sum of the digits of a non-negative integer.

def sum_digits(n):",,"
Correct Solution:
def def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",0,0
"Write a function to sort a list of tuples using the second value of each tuple.

def subject_marks(subjectmarks):",,"
Correct Solution:
def def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",0,0
"Write a function to check whether the given number is undulating or not.

def is_undulating(n): ",,"
Correct Solution:
def def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",0,0
"Write a python function to find the last digit in factorial of a given number.

def last_Digit_Factorial(n): ",,"
Correct Solution:
def def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",0,0
"Write a function to find the volume of a cube given its side length.

def volume_cube(l):",,"
Correct Solution:
def def volume_cube(l):
  volume = l * l * l
  return volume",0,0
"Write a function to calculate the area of a regular polygon given the length and number of its sides.
from math import tan, pi
def area_polygon(s, l):",,"
Correct Solution:
def from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",0,0
"We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.

def extract_index_list(l1, l2, l3):",,"
Correct Solution:
def def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",0,0
"Write a function to find the Eulerian number a(n, m).

def eulerian_num(n, m): ",,"
Correct Solution:
def def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",0,0
"Write a function that takes in an integer n and calculates the harmonic sum of n-1.

def harmonic_sum(n):",,"
Correct Solution:
def def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",0,0
"Write a python function to count the number of positive numbers in a list.

def pos_count(list):",,"
Correct Solution:
def def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",0,0
"Write a python function to check whether the given two integers have opposite sign or not.

def opposite_Signs(x,y): ",,"
Correct Solution:
def def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",0,0
