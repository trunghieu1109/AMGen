question,prediction,expected_output,score,cost
"

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","def count_distinct_characters(string: str) -> int:
    """""" 
    Given a string, find out how many distinct alphabetic characters (regardless of case) it consists of.
    
    This function ignores non-alphabetic characters and treats uppercase and lowercase letters as the same.
    
    Examples:
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    >>> count_distinct_characters('')
    0
    >>> count_distinct_characters('123!@#')
    0
    >>> count_distinct_characters('Hello, World!')
    10
    """"""
    
    # Handle the empty string case explicitly
    if not string:
        return 0
    
    # Use a set to store distinct alphabetic characters
    distinct_characters = set()
    
    for char in string:
        if char.isalpha():  # Check if the character is alphabetic
            distinct_characters.add(char.lower())  # Convert to lowercase to ensure case insensitivity
    
    return len(distinct_characters)","错误: .
 解决方案: def count_distinct_characters(string: str) -> int:
    """""" 
    Given a string, find out how many distinct alphabetic characters (regardless of case) it consists of.
    
    This function ignores non-alphabetic characters and treats uppercase and lowercase letters as the same.
    
    Examples:
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    >>> count_distinct_characters('')
    0
    >>> count_distinct_characters('123!@#')
    0
    >>> count_distinct_characters('Hello, World!')
    10
    """"""
    
    # Handle the empty string case explicitly
    if not string:
        return 0
    
    # Use a set to store distinct alphabetic characters
    distinct_characters = set()
    
    for char in string:
        if char.isalpha():  # Check if the character is alphabetic
            distinct_characters.add(char.lower())  # Convert to lowercase to ensure case insensitivity
    
    return len(distinct_characters).
 测试: 

METADATA = {
    'author': 'jt',
    'dataset': 'test'
}


def check(candidate):
    assert candidate('') == 0
    assert candidate('abcde') == 5
    assert candidate('abcde' + 'cade' + 'CADE') == 5
    assert candidate('aaaaAAAAaaaa') == 1
    assert candidate('Jerry jERRY JeRRRY') == 5

Correct Solution:
def count_distinct_characters(params you should put here):

    return len(set(string.lower()))
",0,0.020332799999999998
"

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","def how_many_times(string: str, substring: str) -> int:
    """"""Find how many times a given substring can be found in the original string. Count overlapping cases.
    
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    >>> how_many_times('abc', '')
    3  # There are 3 empty substrings in 'abc'
    """"""
    # Check if both inputs are strings
    if not isinstance(string, str) or not isinstance(substring, str):
        raise ValueError(""Both arguments must be strings."")
    
    # Handle the case of an empty substring
    if substring == '':
        return len(string)
    
    count = 0
    start_index = 0
    
    # Loop to find all occurrences of the substring
    while True:
        start_index = string.find(substring, start_index)
        if start_index == -1:  # No more occurrences found
            break
        count += 1
        start_index += 1  # Move to the next character to allow for overlapping

    return count","解决方案通过了所有测试用例。
Correct Solution:
def how_many_times(params you should put here):

    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
",1,0.022177049999999997
"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","from typing import List, Optional
def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    
    >>> longest([])
    >>> None
    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
    if not strings:
        return None
    
    longest_string = strings[0]  # Start with the first string as the longest
    for string in strings:
        if len(string) > len(longest_string):
            longest_string = string
            
    return longest_string","解决方案通过了所有测试用例。
Correct Solution:
def longest(params you should put here):

    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
",1,0.006695699999999998
"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","from typing import List
def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []

    result = []
    current_max = numbers[0]
    
    for number in numbers:
        current_max = max(current_max, number)
        result.append(current_max)
    
    return result","解决方案通过了所有测试用例。
Correct Solution:
def rolling_max(params you should put here):

    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
",1,0.008239199999999999
"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","def is_prime(n):
    """"""Return True if a given number is prime, and False otherwise.
    
    A prime number is greater than 1 and has no divisors other than 1 and itself.
    
    Negative numbers, 0, and 1 are not prime.
    
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    >>> is_prime(0)
    False
    >>> is_prime(-5)
    False
    >>> is_prime(2.5)
    Traceback (most recent call last):
        ...
    TypeError: Input must be an integer.
    """"""
    if not isinstance(n, int):
        raise TypeError(""Input must be an integer."")
    if n <= 1:
        return False
    if n <= 3:
        return True  # 2 and 3 are prime
    if n % 2 == 0 or n % 3 == 0:
        return False
    
    # Check for factors from 5 to sqrt(n)
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True","解决方案通过了所有测试用例。
Correct Solution:
def is_prime(params you should put here):

    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
",1,0.026884949999999998
"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","def even_odd_count(num):
    """"""Given an integer, return a tuple that has the number of even and odd digits respectively.
    
    The function ignores the sign of the integer and considers '0' as an even digit.
    
    Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    
    Args:
        num (int): The integer to analyze.
    
    Returns:
        tuple: A tuple containing the count of even and odd digits.
    
    Raises:
        ValueError: If the input is not an integer.
    """"""
    if not isinstance(num, int):
        raise ValueError(""Input must be an integer."")
    
    # Use absolute value to ignore the sign
    num_str = str(abs(num))
    
    even_count = 0
    odd_count = 0
    
    for digit in num_str:
        if digit.isdigit():  # Ensure we are only processing digits
            if int(digit) % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
            
    return (even_count, odd_count)","解决方案通过了所有测试用例。
Correct Solution:
def even_odd_count(params you should put here):

    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
",1,0.023047199999999997
"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    Args:
        arr (list): A list of integers.

    Returns:
        list: A list of strings representing the names of the digits.
    
    Examples:
        >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])
        ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']
        
        >>> by_length([])
        []
        
        >>> by_length([1, -1, 55])
        ['One']
    """"""
    if not arr:  # Check for empty input
        return []
    
    # Step 1: Filter the array to include only numbers between 1 and 9
    filtered_numbers = [num for num in arr if isinstance(num, int) and 1 <= num <= 9]
    
    # Step 2: Sort and reverse the filtered array
    sorted_reversed = sorted(filtered_numbers, reverse=True)
    
    # Step 3: Map each digit to its corresponding name
    number_names = {
        1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"",
        5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""
    }
    
    # Create the result list using the mapped names
    result = [number_names[num] for num in sorted_reversed]
    
    return result","解决方案通过了所有测试用例。
Correct Solution:
def by_length(params you should put here):

    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
",1,0.029771250000000003
"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
","def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    uppercase_vowels = 'AEIOU'
    count = 0
    
    for i in range(0, len(s), 2):  # Iterate over even indices
        if s[i] in uppercase_vowels:  # Check if the character is an uppercase vowel
            count += 1
            
    return count","解决方案通过了所有测试用例。
Correct Solution:
def count_upper(params you should put here):

    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
",1,0.005842049999999999
"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","def correct_bracketing(brackets: str) -> bool:
    """"""
    Check if every opening bracket has a corresponding closing bracket.

    The input string should only contain the characters '<' and '>'.
    
    Args:
        brackets (str): A string of '<' and '>' characters.

    Returns:
        bool: True if the brackets are correctly matched, False otherwise.

    Examples:
        >>> correct_bracketing(""<"")
        False
        >>> correct_bracketing(""<>"")
        True
        >>> correct_bracketing(""<<><>>"")
        True
        >>> correct_bracketing(""><<>"")
        False
        >>> correct_bracketing("""")  # Edge case: empty string
        True
        >>> correct_bracketing("">>>"")  # Edge case: only closing brackets
        False
        >>> correct_bracketing(""<<<"")  # Edge case: only opening brackets
        False
    """"""
    
    # Input validation
    if not all(c in ""<>"" for c in brackets):
        raise ValueError(""Input string must only contain '<' and '>' characters."")
    
    balance = 0
    for char in brackets:
        if char == '<':
            balance += 1
        elif char == '>':
            balance -= 1
        
        # If balance goes negative, we have a closing bracket without a matching opening
        if balance < 0:
            return False
    
    # At the end, balance should be zero for all brackets to be matched
    return balance == 0","解决方案通过了所有测试用例。
Correct Solution:
def correct_bracketing(params you should put here):

    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",1,0.019925099999999998
"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
","def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    check_if_last_char_is_a_letter(""   "") ➞ False
    '''
    # Check if the string is empty or consists only of spaces
    if not txt or txt.isspace():
        return False
    
    # Get the last character
    last_char = txt[-1]
    
    # Check if the last character is a letter and not part of a word
    return last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' ')","解决方案通过了所有测试用例。
Correct Solution:
def check_if_last_char_is_a_letter(params you should put here):

 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
",1,0.018556499999999997
"
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","def do_algebra(operator, operand):
    if len(operator) + 1 != len(operand):
        raise ValueError(""The length of operator list must be one less than the length of operand list."")
    
    valid_operators = {'+', '-', '*', '//', '**'}
    for op in operator:
        if op not in valid_operators:
            raise ValueError(f""Invalid operator: {op}"")
    
    for num in operand:
        if not isinstance(num, int) or num < 0:
            raise ValueError(""Operands must be non-negative integers."")
    
    # Evaluate the expression respecting operator precedence
    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}
    
    def apply_operator(operators, operands):
        right = operands.pop()
        left = operands.pop()
        op = operators.pop()
        if op == '+':
            operands.append(left + right)
        elif op == '-':
            operands.append(left - right)
        elif op == '*':
            operands.append(left * right)
        elif op == '//':
            if right == 0:
                raise ZeroDivisionError(""Division by zero is not allowed."")
            operands.append(left // right)
        elif op == '**':
            operands.append(left ** right)

    operators = []
    operands = [operand[0]]

    for i in range(len(operator)):
        while (operators and precedence[operators[-1]] >= precedence[operator[i]]):
            apply_operator(operators, operands)
        operators.append(operator[i])
        operands.append(operand[i + 1])

    while operators:
        apply_operator(operators, operands)

    return operands[0]
operator = ['+', '*', '-']
operand = [2, 3, 4, 5]
result = do_algebra(operator, operand)","解决方案通过了所有测试用例。
Correct Solution:
def do_algebra(params you should put here):

    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
",1,0.03193095
"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","def special_factorial(n):
    """"""Calculate the Brazilian factorial of a positive integer n.
    
    The Brazilian factorial is defined as:
    special_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    
    Args:
        n (int): A positive integer for which to calculate the Brazilian factorial.
    
    Returns:
        int: The Brazilian factorial of the input integer.
    
    Raises:
        ValueError: If n is not a positive integer.
    
    Examples:
        >>> special_factorial(4)
        288
        >>> special_factorial(1)
        1
        >>> special_factorial(2)
        2
        >>> special_factorial(3)
        12
    """"""
    
    if not isinstance(n, int) or n <= 0:
        raise ValueError(""Input must be a positive integer."")
    
    product = 1
    current_factorial = 1
    
    for i in range(1, n + 1):
        current_factorial *= i  # Calculate i! iteratively
        product *= current_factorial  # Multiply by the current factorial
    
    return product","解决方案通过了所有测试用例。
Correct Solution:
def special_factorial(params you should put here):

    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
",1,0.02875095
"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","def hex_key(num):
    """"""Count the number of prime hexadecimal digits in the input string.
    
    Args:
        num (str): A string representing a hexadecimal number.
    
    Returns:
        int: The count of prime hexadecimal digits (2, 3, 5, 7, B, D).
    """"""
    # Define the set of prime hexadecimal digits
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    
    # Handle empty input explicitly
    if not num:
        return 0
    
    # Initialize a counter for prime digits
    count = 0
    
    # Iterate through each character in the input string
    for char in num:
        # Convert to uppercase to handle potential lowercase input
        char = char.upper()
        # Check if the character is in the set of prime hexadecimal digits
        if char in prime_hex_digits:
            count += 1
            
    return count","解决方案通过了所有测试用例。
Correct Solution:
def hex_key(params you should put here):

    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
",1,0.021425549999999998
"
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","def compare(game, guess):
    """"""
    Compares the actual game scores with the guessed scores.
    
    Parameters:
    game (list of int/float): The actual scores of the games.
    guess (list of int/float): The guessed scores.
    
    Returns:
    list of int: The absolute differences between the guessed and actual scores.
    
    Raises:
    ValueError: If the lengths of game and guess are not equal.
    TypeError: If any element in game or guess is not numeric.
    """"""
    
    # Input length validation
    if len(game) != len(guess):
        raise ValueError(""The lengths of game and guess must be equal."")
    
    # Check for empty lists
    if not game and not guess:
        return []
    
    # Type checking for numeric values
    for g, q in zip(game, guess):
        if not isinstance(g, (int, float)) or not isinstance(q, (int, float)):
            raise TypeError(""All elements in game and guess must be numeric (int or float)."")
    
    # Calculate absolute differences
    return [abs(g - q) for g, q in zip(game, guess)]","解决方案通过了所有测试用例。
Correct Solution:
def compare(params you should put here):

    return [abs(x-y) for x,y in zip(game,guess)]
",1,0.02774415
"
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","def can_arrange(arr):
    """"""Returns the largest index of an element which is not greater than
    or equal to the element immediately preceding it. If no such element
    exists, returns -1. The given array will not contain duplicate values.

    Args:
        arr (list of int): The input array of integers.

    Returns:
        int: The largest index of the element meeting the condition, or -1.
    
    Examples:
        can_arrange([1, 2, 4, 3, 5]) = 3
        can_arrange([1, 2, 3]) = -1
        can_arrange([]) = -1
        can_arrange([5]) = -1
        can_arrange([1, 2, 3, 4]) = -1
        can_arrange([5, 4, 3, 2]) = 0
        can_arrange([-1, 0, 1]) = -1
        can_arrange([1, 3, 2, 4]) = 2
    """"""
    # Handle empty array case
    if not arr:
        return -1

    largest_index = -1
    
    # Iterate through the array starting from the second element
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            largest_index = i  # Update the largest index if condition is met
    
    return largest_index","解决方案通过了所有测试用例。
Correct Solution:
def can_arrange(params you should put here):

    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
",1,0.018989549999999997
"
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","def max_fill(grid, capacity):
    """"""
    Calculate the number of times buckets need to be lowered to empty the wells.

    Parameters:
    grid (List[List[int]]): A rectangular grid representing wells.
    capacity (int): The capacity of each bucket.

    Returns:
    int: The total number of times buckets need to be lowered.

    Constraints:
    * 1 <= grid.length <= 100
    * 1 <= grid[i].length <= 100
    * grid[i][j] -> 0 | 1
    * 1 <= capacity <= 10
    """"""
    
    # Handle edge cases for empty grid or invalid capacity
    if not grid or capacity < 1 or capacity > 10:
        return 0  

    total_times = 0
    
    for row in grid:
        # Count the number of 1s in the current row
        water_units = sum(row)
        
        # Calculate how many times we need to lower the bucket for this well
        if water_units > 0:
            times_needed = (water_units + capacity - 1) // capacity  # Ceiling division
            total_times += times_needed
            
    return total_times","解决方案通过了所有测试用例。
Correct Solution:
def max_fill(params you should put here):

    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
",1,0.0292647
"

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","def get_positive(l: list) -> list:
    """"""Return only positive numbers in the list.
    
    Args:
        l (list): A list of elements to filter.
    
    Returns:
        list: A list containing only the positive numbers from the input list.
    
    Examples:
        >>> get_positive([-1, 2, -4, 5, 6])
        [2, 5, 6]
        >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
        [5, 3, 2, 3, 9, 123, 1]
        >>> get_positive([])  # Edge case: empty list
        []
        >>> get_positive([-1, -2, -3])  # Edge case: all negative
        []
        >>> get_positive([1, 'a', 2])  # Edge case: mixed types
        [1, 2]
    """"""
    if not isinstance(l, list):
        raise ValueError(""Input must be a list."")
    
    return [x for x in l if isinstance(x, (int, float)) and x > 0]","解决方案通过了所有测试用例。
Correct Solution:
def get_positive(params you should put here):

    return [e for e in l if e > 0]
",1,0.017312849999999994
"

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","def largest_divisor(n: int) -> int:
    """"""Find the largest divisor of n that is smaller than n.
    
    Returns 0 for n = 1, and raises ValueError for n <= 0.
    
    Args:
        n (int): The number to find the largest divisor for.
    
    Returns:
        int: The largest divisor of n that is smaller than n, or 0 if n is 1.
    
    Raises:
        ValueError: If n is less than or equal to 0.
    
    Examples:
        >>> largest_divisor(15)
        5
        >>> largest_divisor(10)
        5
        >>> largest_divisor(7)
        1
        >>> largest_divisor(1)
        0
        >>> largest_divisor(-5)
        Traceback (most recent call last):
            ...
        ValueError: Input must be a positive integer.
    """"""
    if n <= 0:
        raise ValueError(""Input must be a positive integer."")
    if n == 1:
        return 0  # No divisors for 1
    
    # Check for divisors from n // 2 down to 1
    for i in range(n // 2, 0, -1):
        if n % i == 0:
            return i
    
    return 1  # If no larger divisor found, return 1 (since 1 divides all integers)","解决方案通过了所有测试用例。
Correct Solution:
def largest_divisor(params you should put here):

    for i in reversed(range(n)):
        if n % i == 0:
            return i
",1,0.026444699999999998
"
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","def digitSum(s: str) -> int:
    """"""
    Calculate the sum of the ASCII values of uppercase characters in a given string.

    This function iterates through the input string and sums the ASCII values of 
    all uppercase letters (A-Z). If the string is empty or contains no uppercase 
    letters, the function returns 0.

    Args:
        s (str): The input string to be processed.

    Returns:
        int: The sum of the ASCII values of uppercase characters.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131  # A (65) + B (66)
        digitSum(""abcCd"") => 67   # C (67)
        digitSum(""helloE"") => 69   # E (69)
        digitSum(""woArBld"") => 131  # A (65) + B (66)
        digitSum(""aAaaaXa"") => 153  # A (65) + X (88)
        digitSum(""123!@#"") => 0      # No uppercase letters
        digitSum(""HELLO"") => 372     # H (72) + E (69) + L (76) + L (76) + O (79)
        digitSum(""mixedCASE123"") => 138  # C (67) + A (65) + S (83) + E (69)
    """"""
    return sum(ord(char) for char in s if char.isupper())","解决方案通过了所有测试用例。
Correct Solution:
def digitSum(params you should put here):

    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
",1,0.024946799999999998
"

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","def string_sequence(n: int) -> str:
    """"""Return a string containing space-delimited numbers starting from 0 up to n inclusive.

    Args:
        n (int): A non-negative integer.

    Raises:
        ValueError: If n is negative.
        TypeError: If n is not an integer.

    Examples:
        >>> string_sequence(0)
        '0'
        >>> string_sequence(5)
        '0 1 2 3 4 5'
        >>> string_sequence(1)
        '0 1'
        >>> string_sequence(10)
        '0 1 2 3 4 5 6 7 8 9 10'
    """"""
    if not isinstance(n, int):
        raise TypeError(""Input must be an integer."")
    if n < 0:
        raise ValueError(""Input must be non-negative."")
    
    return ' '.join(map(str, range(n + 1)))","解决方案通过了所有测试用例。
Correct Solution:
def string_sequence(params you should put here):

    return ' '.join([str(x) for x in range(n + 1)])
",1,0.030181950000000003
"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","from typing import List
def add(lst: List[int]) -> int:
    """"""Given a non-empty list of integers lst, add the even elements that are at odd indices.

    Args:
        lst (List[int]): A list of integers.

    Returns:
        int: The sum of even integers located at odd indices.

    Raises:
        ValueError: If the input list is empty or contains non-integer values.

    Examples:
        add([4, 2, 6, 7]) ==> 2
        add([1, 2, 3, 4]) ==> 0
        add([2, 4, 6, 8]) ==> 4
        add([1, 3, 5, 7]) ==> 0
        add([1, 2, 3, 4, 5, 6]) ==> 8
    """"""
    
    # Input validation
    if not lst:
        raise ValueError(""Input list must be non-empty."")
    
    if not all(isinstance(x, int) for x in lst):
        raise ValueError(""All elements in the list must be integers."")
    
    total = 0
    for index in range(1, len(lst), 2):  # Start from index 1 and step by 2
        if lst[index] % 2 == 0:  # Check if the value at the odd index is even
            total += lst[index]
    
    return total","解决方案通过了所有测试用例。
Correct Solution:
def add(params you should put here):

    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
",1,0.0259263
"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","from typing import List
def sort_numbers(numbers: str) -> str:
    """""" 
    Input is a space-delimited string of numerals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.
    Returns the string with numbers sorted from smallest to largest.
    
    Raises ValueError for invalid numeral words.
    
    Examples:
    >>> sort_numbers('three one five')
    'one three five'
    >>> sort_numbers('two zero four')
    'zero two four'
    >>> sort_numbers('')
    ''
    >>> sort_numbers('one two three four five six seven eight nine zero')
    'zero one two three four five six seven eight nine'
    >>> sort_numbers('one two ten')
    Traceback (most recent call last):
        ...
    ValueError: Invalid numeral word: ten
    """"""
    
    num_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    
    reverse_num_map = {v: k for k, v in num_map.items()}
    
    # Split the input string into words
    words = numbers.split()
    
    # Convert words to their corresponding integer values, handling invalid words
    num_list = []
    for word in words:
        if word in num_map:
            num_list.append(num_map[word])
        else:
            raise ValueError(f""Invalid numeral word: {word}"")
    
    # Sort the list of integers
    num_list.sort()
    
    # Convert sorted integers back to their string representations
    sorted_words = [reverse_num_map[num] for num in num_list]
    
    # Join the sorted words into a single string
    return ' '.join(sorted_words)","解决方案通过了所有测试用例。
Correct Solution:
def sort_numbers(params you should put here):

    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
",1,0.02830305
"
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","import re
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    This function handles multiple spaces and commas, as well as leading and trailing whitespace.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    words_string(""  Hello, world  "") == [""Hello"", ""world""]
    words_string("""") == []
    words_string(""Hello,, world"") == [""Hello"", ""world""]
    words_string(""Hello   world"") == [""Hello"", ""world""]
    words_string(""Hello,   , world"") == [""Hello"", ""world""]
    """"""
    # Use regex to split by commas and whitespace
    words = re.split(r'[,\s]+', s.strip())
    return [word for word in words if word]  # Filter out any empty strings","解决方案通过了所有测试用例。
Correct Solution:
def words_string(params you should put here):

    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
",1,0.02543895
"

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","def remove_vowels(text):
    """"""
    remove_vowels is a function that takes a string and returns a string without vowels (both uppercase and lowercase).
    
    Vowels removed include: a, e, i, o, u, A, E, I, O, U, and accented vowels.
    
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    >>> remove_vowels('café')
    'cf'
    >>> remove_vowels('naïve')
    'nv'
    >>> remove_vowels('12345')
    '12345'
    >>> remove_vowels('Hello, World!')
    'Hll, Wrld!'
    >>> remove_vowels(['not', 'a', 'string'])
    Traceback (most recent call last):
        ...
    TypeError: Input must be a string
    """"""
    
    if not isinstance(text, str):
        raise TypeError(""Input must be a string"")
    
    vowels = set(""aeiouAEIOUáéíóúÁÉÍÓÚ"")
    result = []
    
    for char in text:
        if char not in vowels:
            result.append(char)
    
    return ''.join(result)","解决方案通过了所有测试用例。
Correct Solution:
def remove_vowels(params you should put here):

    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
",1,0.019476599999999997
"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle, return True if the three
    sides form a right-angled triangle, False otherwise.
    
    A right-angled triangle is a triangle in which one angle is a right angle (90 degrees).
    
    Parameters:
    a (int or float): Length of side a
    b (int or float): Length of side b
    c (int or float): Length of side c
    
    Returns:
    bool: True if the sides form a right-angled triangle, False otherwise.
    
    Raises:
    ValueError: If any side is not a positive number.
    
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    # Validate inputs
    for side in (a, b, c):
        if not isinstance(side, (int, float)) or side <= 0:
            raise ValueError(""Sides must be positive numbers."")
    
    # Check the triangle inequality theorem
    if a + b <= c or a + c <= b or b + c <= a:
        return False
    
    # Identify the longest side
    max_side = max(a, b, c)
    # Calculate the sum of the squares of the other two sides
    sum_of_squares = a**2 + b**2 + c**2 - max_side**2
    
    # Check the Pythagorean theorem with a tolerance for floating-point precision
    epsilon = 1e-9
    return abs(sum_of_squares - max_side**2) < epsilon","解决方案通过了所有测试用例。
Correct Solution:
def right_angle_triangle(params you should put here):

    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
",1,0.0208194
"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","from typing import List
def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]","解决方案通过了所有测试用例。
Correct Solution:
def filter_by_prefix(params you should put here):

    return [x for x in strings if x.startswith(prefix)]
",1,0.00124845
"
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","def check_dict_case(input_dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False if the given dictionary is empty 
    or contains non-string keys.

    Examples:
    check_dict_case({""a"": ""apple"", ""b"": ""banana""}) should return True.
    check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""B"": ""banana""}) should return False.
    check_dict_case({""a"": ""apple"", 8: ""banana"", ""a"": ""apple""}) should return False.
    check_dict_case({""Name"": ""John"", ""Age"": ""36"", ""City"": ""Houston""}) should return False.
    check_dict_case({""STATE"": ""NC"", ""ZIP"": ""12345""}) should return True.
    """"""
    if not input_dict:  # Check if the dictionary is empty
        return False

    all_lower = True
    all_upper = True

    for key in input_dict.keys():
        if not isinstance(key, str):
            return False  # Return False if any key is not a string
        if key.islower():
            all_upper = False
        elif key.isupper():
            all_lower = False
        else:
            all_lower = all_upper = False  # Mixed case

    return all_lower or all_upper","解决方案通过了所有测试用例。
Correct Solution:
def check_dict_case(params you should put here):

    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
",1,0.024424349999999997
"

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","def fib(n: int) -> int:
    """"""Return the n-th Fibonacci number.
    
    The Fibonacci sequence is defined as follows:
    - fib(0) = 0
    - fib(1) = 1
    - fib(n) = fib(n-1) + fib(n-2) for n > 1

    Args:
        n (int): A non-negative integer representing the position in the Fibonacci sequence.
    
    Returns:
        int: The n-th Fibonacci number.
    
    Raises:
        ValueError: If n is not a non-negative integer.
    
    Examples:
    >>> fib(0)
    0
    >>> fib(1)
    1
    >>> fib(2)
    1
    >>> fib(3)
    2
    >>> fib(4)
    3
    >>> fib(5)
    5
    >>> fib(10)
    55
    >>> fib(20)
    6765
    """"""
    if not isinstance(n, int) or n < 0:
        raise ValueError(""Input must be a non-negative integer."")
    
    if n == 0:
        return 0
    elif n == 1:
        return 1
    
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b","解决方案通过了所有测试用例。
Correct Solution:
def fib(params you should put here):

    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
",1,0.022597799999999998
"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","def digits(n: int) -> int:
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    
    Args:
        n (int): A positive integer.
    
    Returns:
        int: The product of the odd digits or 0 if all are even.
    
    Examples:
        digits(1)  == 1
        digits(4)  == 0
        digits(235) == 15
    """"""
    if not isinstance(n, int) or n <= 0:
        raise ValueError(""Input must be a positive integer."")
    
    product = 1
    has_odd = False
    
    while n > 0:
        digit = n % 10
        if digit % 2 != 0:  # Check if the digit is odd
            product *= digit
            has_odd = True
        n //= 10  # Remove the last digit
    
    return product if has_odd else 0","解决方案通过了所有测试用例。
Correct Solution:
def digits(params you should put here):

    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
",1,0.016835699999999995
"

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","def sum_to_n(n: int) -> int:
    """"""Calculate the sum of all integers from 1 to n.

    If n is less than 1, the function returns 0.

    Args:
        n (int): The upper limit of the sum. Must be a non-negative integer.

    Returns:
        int: The sum of integers from 1 to n, or 0 if n < 1.

    Examples:
        >>> sum_to_n(30)
        465
        >>> sum_to_n(100)
        5050
        >>> sum_to_n(5)
        15
        >>> sum_to_n(10)
        55
        >>> sum_to_n(1)
        1
        >>> sum_to_n(0)
        0
        >>> sum_to_n(-5)
        0
    """"""
    if n < 1:
        return 0
    return n * (n + 1) // 2  # Use integer division to ensure the result is an integer","解决方案通过了所有测试用例。
Correct Solution:
def sum_to_n(params you should put here):

    return sum(range(n + 1))
",1,0.023477099999999997
