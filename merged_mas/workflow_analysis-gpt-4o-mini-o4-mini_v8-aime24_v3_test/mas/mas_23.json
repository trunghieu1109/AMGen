[
    {
        "subtask_id": "subtask_1",
        "objective": "Identify all possible combinations of digits for the top row that form a three-digit number.",
        "supporting_info": "The top row must consist of three digits, each ranging from 0 to 9, and must form a valid three-digit number.",
        "agent_collaboration": "CoT",
        "dependencies": [],
        "abstracted_objective": "Construct all ordered tuples of length three from a specified domain of elements.",
        "subtask_name": "construct_intermediate_steps"
    },
    {
        "subtask_id": "subtask_2",
        "objective": "Identify all possible combinations of digits for the bottom row that form a three-digit number.",
        "supporting_info": "The bottom row must consist of three digits, each ranging from 0 to 9, and must form a valid three-digit number.",
        "agent_collaboration": "CoT",
        "dependencies": [
            "subtask_1"
        ],
        "abstracted_objective": "Construct all ordered tuples of length three from a specified domain of elements.",
        "subtask_name": "construct_intermediate_steps"
    },
    {
        "subtask_id": "subtask_3",
        "objective": "Find combinations where the sum of the two numbers formed by reading left to right is 999.",
        "supporting_info": "The outputs from subtask 1 and subtask 2 are required to check the left-to-right sum condition.",
        "agent_collaboration": "SC_CoT",
        "dependencies": [
            "subtask_1",
            "subtask_2"
        ],
        "abstracted_objective": "Filter all pairs of ordered tuples by evaluating a specified binary relation on their derived values and retaining those that satisfy a target equality condition.",
        "subtask_name": "filter_elements"
    },
    {
        "subtask_id": "subtask_4",
        "objective": "Find combinations where the sum of the three numbers formed by reading top to bottom is 99.",
        "supporting_info": "The outputs from subtask 1 and subtask 2 are required to check the top-to-bottom sum condition.",
        "agent_collaboration": "SC_CoT",
        "dependencies": [
            "subtask_1",
            "subtask_2"
        ],
        "abstracted_objective": "Filter all collections of three derived values by evaluating a specified aggregate relation and retaining those that satisfy a target equality condition.",
        "subtask_name": "filter_elements"
    },
    {
        "subtask_id": "subtask_5",
        "objective": "Identify the common combinations that satisfy both the left-to-right and top-to-bottom sum conditions.",
        "supporting_info": "The outputs from subtask 3 and subtask 4 are needed to find common valid combinations.",
        "agent_collaboration": "Debate",
        "dependencies": [
            "subtask_3",
            "subtask_4"
        ],
        "abstracted_objective": "Filter a collection by retaining only those elements that appear in another collection.",
        "subtask_name": "filter_elements"
    }
]