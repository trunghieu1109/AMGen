code,entry_point,prompt,source_file,task_id,test,test_imports,test_list
"def count_rotation(arr):   
    for i in range (1,len(arr)): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",count_rotation,"Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/

def count_rotation(arr):   ",Benchmark Questions Verification V2.ipynb,802,"def check():
    assert count_rotation([3,2,1]) == 1
    assert count_rotation([4,5,1,2,3]) == 2
    assert count_rotation([7,8,9,1,2,3]) == 3
    assert count_rotation([1,2,3]) == 0
    assert count_rotation([1,3,2]) == 2
",[],"['assert count_rotation([3,2,1]) == 1', 'assert count_rotation([4,5,1,2,3]) == 2', 'assert count_rotation([7,8,9,1,2,3]) == 3', 'assert count_rotation([1,2,3]) == 0', 'assert count_rotation([1,3,2]) == 2']"
"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",multiply_int,"Write a function to multiply two integers.

def multiply_int(x, y):",Mike's Copy of Benchmark Questions Verification V2.ipynb,127,"def check():
    assert multiply_int(10,20)==200
    assert multiply_int(5,10)==50
    assert multiply_int(4,8)==32
",[],"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']"
"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",string_to_tuple,"Write a function to convert a given string to a tuple of characters.

def string_to_tuple(str1):",Ellen's Copy of Benchmark Questions Verification V2.ipynb,310,"def check():
    assert string_to_tuple(""python 3.0"")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
    assert string_to_tuple(""item1"")==('i', 't', 'e', 'm', '1')
    assert string_to_tuple(""15.10"")==('1', '5', '.', '1', '0')
",[],"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']"
"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",dif_Square,"Write a python function to check whether the given number can be represented as the difference of two squares or not.

def dif_Square(n): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,72,"def check():
    assert dif_Square(5) == True
    assert dif_Square(10) == False
    assert dif_Square(15) == True
",[],"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']"
"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",left_insertion,"Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php
import bisect
def left_insertion(a, x):",Benchmark Questions Verification V2.ipynb,736,"def check():
    assert left_insertion([1,2,4,5],6)==4
    assert left_insertion([1,2,4,5],3)==2
    assert left_insertion([1,2,4,5],7)==4
",[],"['assert left_insertion([1,2,4,5],6)==4', 'assert left_insertion([1,2,4,5],3)==2', 'assert left_insertion([1,2,4,5],7)==4']"
"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",Find_Max_Length,"Write a python function to find the length of the longest sublists.

def Find_Max_Length(lst):  ",Benchmark Questions Verification V2.ipynb,562,"def check():
    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4
    assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3
    assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5
",[],"['assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4', 'assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3', 'assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5']"
"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",validate,"Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.

def validate(n): ",Benchmark Questions Verification V2.ipynb,283,"def check():
    assert validate(1234) == True
    assert validate(51241) == False
    assert validate(321) == True
",[],"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']"
"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",sequential_search,"Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).

def sequential_search(dlist, item):",Benchmark Questions Verification V2.ipynb,280,"def check():
    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)
",[],"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']"
"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",sum_div,"Write a function to return the sum of all divisors of a number.

def sum_div(number):",Ellen's Copy of Benchmark Questions Verification V2.ipynb,295,"def check():
    assert sum_div(8)==7
    assert sum_div(12)==16
    assert sum_div(7)==1
",[],"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']"
"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",large_product,"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.

def large_product(nums1, nums2, N):",Ellen's Copy of Benchmark Questions Verification V2.ipynb,308,"def check():
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]
",[],"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']"
"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",remove_nested,"Write a function to remove tuples from the given tuple.

def remove_nested(test_tup):",Benchmark Questions Verification V2.ipynb,791,"def check():
    assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
    assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)
    assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)
    assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)
",[],"['assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)', 'assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)', 'assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)', 'assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)']"
"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",max_product_tuple,"Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.

def max_product_tuple(list1):",Mike's Copy of Benchmark Questions Verification V2.ipynb,120,"def check():
    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484
",[],"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']"
"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",find_Parity,"Write a python function to find whether the parity of a given number is odd.

def find_Parity(x): ",Benchmark Questions Verification V2.ipynb,406,"def check():
    assert find_Parity(12) == False
    assert find_Parity(7) == True
    assert find_Parity(10) == False
",[],"['assert find_Parity(12) == False', 'assert find_Parity(7) == True', 'assert find_Parity(10) == False']"
"def left_rotate(n,d):   
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d))  ",left_rotate,"Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.

def left_rotate(n,d):   ",Benchmark Questions Verification V2.ipynb,799,"def check():
    assert left_rotate(16,2) == 64
    assert left_rotate(10,2) == 40
    assert left_rotate(99,3) == 792
    assert left_rotate(99,3) == 792
    assert left_rotate(0b0001,3) == 0b1000
    assert left_rotate(0b0101,3) == 0b101000
    assert left_rotate(0b11101,3) == 0b11101000
",[],"['assert left_rotate(16,2) == 64', 'assert left_rotate(10,2) == 40', 'assert left_rotate(99,3) == 792', 'assert left_rotate(99,3) == 792', 'assert left_rotate(0b0001,3) == 0b1000', 'assert left_rotate(0b0101,3) == 0b101000', 'assert left_rotate(0b11101,3) == 0b11101000']"
"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",surfacearea_sphere,"Write a function to find the surface area of a sphere.
import math
def surfacearea_sphere(r):",Mike's Copy of Benchmark Questions Verification V2.ipynb,85,"def check():
    assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)
    assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)
    assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)
",['import math'],"['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']"
"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",find_star_num,"Write a function to find the n'th star number.

def find_star_num(n): ",Benchmark Questions Verification V2.ipynb,268,"def check():
    assert find_star_num(3) == 37
    assert find_star_num(4) == 73
    assert find_star_num(5) == 121
",[],"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']"
"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",multiply_elements,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.

def multiply_elements(test_tup):",Benchmark Questions Verification V2.ipynb,726,"def check():
    assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
    assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
    assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
    assert multiply_elements((12,)) == ()
",[],"['assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)', 'assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)', 'assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)', 'assert multiply_elements((12,)) == ()']"
"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",angle_complex,"Write a function to get the angle of a complex number.
import cmath
def angle_complex(a,b):",Mike's Copy of Benchmark Questions Verification V2.ipynb,124,"def check():
    assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
    assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)
    assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)
",['import math'],"['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']"
"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",find_Volume,"Write a python function to find the volume of a triangular prism.

def find_Volume(l,b,h) : ",Benchmark Questions Verification V2.ipynb,14,"def check():
    assert find_Volume(10,8,6) == 240
    assert find_Volume(3,2,2) == 6
    assert find_Volume(1,2,1) == 1
",[],"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']"
"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",rgb_to_hsv,"Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/

def rgb_to_hsv(r, g, b):",Benchmark Questions Verification V2.ipynb,783,"def check():
    assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)
    assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)
    assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)
",[],"['assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)', 'assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)', 'assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)']"
"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",swap_List,"Write a python function to interchange the first and last elements in a list.

def swap_List(newList): ",Benchmark Questions Verification V2.ipynb,591,"def check():
    assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]
    assert swap_List([1, 2, 3]) == [3, 2, 1]
    assert swap_List([4, 5, 6]) == [6, 5, 4]
",[],"['assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]', 'assert swap_List([1, 2, 3]) == [3, 2, 1]', 'assert swap_List([4, 5, 6]) == [6, 5, 4]']"
"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",median_trapezium,"Write a function to find the median length of a trapezium.

def median_trapezium(base1,base2,height):",charlessutton@: Benchmark Questions Verification V2.ipynb,432,"def check():
    assert median_trapezium(15,25,35)==20
    assert median_trapezium(10,20,30)==15
    assert median_trapezium(6,9,4)==7.5
",[],"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']"
"def check_min_heap_helper(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap_helper(arr, 2 * i + 2))
    return left_child and right_child

def check_min_heap(arr):
  return check_min_heap_helper(arr, 0)",check_min_heap,"Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/

def check_min_heap(arr): ",Benchmark Questions Verification V2.ipynb,751,"def check():
    assert check_min_heap([1, 2, 3, 4, 5, 6]) == True
    assert check_min_heap([2, 3, 4, 5, 10, 15]) == True
    assert check_min_heap([2, 10, 4, 5, 3, 15]) == False
",[],"['assert check_min_heap([1, 2, 3, 4, 5, 6]) == True', 'assert check_min_heap([2, 3, 4, 5, 10, 15]) == True', 'assert check_min_heap([2, 10, 4, 5, 3, 15]) == False']"
"def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",kth_element,"Write a function to find the kth element in the given array using 1-based indexing.

def kth_element(arr, k):",Mike's Copy of Benchmark Questions Verification V2.ipynb,101,"def check():
    assert kth_element([12,3,5,7,19], 2) == 3
    assert kth_element([17,24,8,23], 3) == 8
    assert kth_element([16,21,25,36,4], 4) == 36
",[],"['assert kth_element([12,3,5,7,19], 2) == 3', 'assert kth_element([17,24,8,23], 3) == 8', 'assert kth_element([16,21,25,36,4], 4) == 36']"
"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",square_Sum,"Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.

def square_Sum(n):  ",Benchmark Questions Verification V2.ipynb,267,"def check():
    assert square_Sum(2) == 10
    assert square_Sum(3) == 35
    assert square_Sum(4) == 84
",[],"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']"
"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",minimum,"Write a python function to find the minimum of two numbers.

def minimum(a,b):   ",Benchmark Questions Verification V2.ipynb,404,"def check():
    assert minimum(1,2) == 1
    assert minimum(-5,-4) == -5
    assert minimum(0,0) == 0
",[],"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']"
"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",rear_extract,"Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.

def rear_extract(test_list):",Benchmark Questions Verification V2.ipynb,272,"def check():
    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]
    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]
    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]
",[],"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]"
"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",is_polite,"Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/
import math 
def is_polite(n): ",Benchmark Questions Verification V2.ipynb,765,"def check():
    assert is_polite(7) == 11
    assert is_polite(4) == 7
    assert is_polite(9) == 13
",[],"['assert is_polite(7) == 11', 'assert is_polite(4) == 7', 'assert is_polite(9) == 13']"
"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",empty_list,"Write a function to create a list of N empty dictionaries.

def empty_list(length):",Benchmark Questions Verification V2.ipynb,568,"def check():
    assert empty_list(5)==[{},{},{},{},{}]
    assert empty_list(6)==[{},{},{},{},{},{}]
    assert empty_list(7)==[{},{},{},{},{},{},{}]
",[],"['assert empty_list(5)==[{},{},{},{},{}]', 'assert empty_list(6)==[{},{},{},{},{},{}]', 'assert empty_list(7)==[{},{},{},{},{},{},{}]']"
"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",divisible_by_digits,"Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php

def divisible_by_digits(startnum, endnum):",Benchmark Questions Verification V2.ipynb,745,"def check():
    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
    assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
    assert divisible_by_digits(20,25)==[22, 24]
",[],"['assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]', 'assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]', 'assert divisible_by_digits(20,25)==[22, 24]']"
"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",count_X,"Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.

def count_X(tup, x): ",Benchmark Questions Verification V2.ipynb,250,"def check():
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4
",[],"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']"
"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",max_subarray_product,"Write a function to find the maximum product subarray of the given array.

def max_subarray_product(arr):",charlessutton@: Benchmark Questions Verification V2.ipynb,463,"def check():
    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112
    assert max_subarray_product([6, -3, -10, 0, 2]) == 180
    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80
",[],"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']"
"def Split(list): 
    return [num for num in list if num % 2 == 0]",Split,"Write a python function to find even numbers from a list of numbers.

def Split(list): ",Benchmark Questions Verification V2.ipynb,629,"def check():
    assert Split([1,2,3,4,5]) == [2,4]
    assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]
    assert Split ([8,12,15,19]) == [8,12]
",[],"['assert Split([1,2,3,4,5]) == [2,4]', 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]', 'assert Split ([8,12,15,19]) == [8,12]']"
"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",sum_series,"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).

def sum_series(n):",Benchmark Questions Verification V2.ipynb,162,"def check():
    assert sum_series(6) == 12
    assert sum_series(10) == 30
    assert sum_series(9) == 25
",[],"['assert sum_series(6) == 12', 'assert sum_series(10) == 30', 'assert sum_series(9) == 25']"
"def max_sum_list(lists):
 return max(lists, key=sum)",max_sum_list,"Write a function that returns the list in a list of lists whose sum of elements is the highest.

def max_sum_list(lists):",Benchmark Questions Verification V2.ipynb,805,"def check():
    assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]
    assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]
    assert max_sum_list([[2,3,1]])==[2,3,1]
",[],"['assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]', 'assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]', 'assert max_sum_list([[2,3,1]])==[2,3,1]']"
"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",magic_square_test,"Write a function to calculate whether the matrix is a magic square.

def magic_square_test(my_matrix):",Mike's Copy of Benchmark Questions Verification V2.ipynb,129,"def check():
    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False
",[],"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']"
"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",round_and_sum,"Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.

def round_and_sum(list1):",charlessutton@: Benchmark Questions Verification V2.ipynb,419,"def check():
    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243
    assert round_and_sum([5,2,9,24.3,29])==345
    assert round_and_sum([25.0,56.7,89.2])==513
",[],"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']"
"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",sum_list,"Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].

def sum_list(lst1,lst2):",Benchmark Questions Verification V2.ipynb,728,"def check():
    assert sum_list([10,20,30],[15,25,35])==[25,45,65]
    assert sum_list([1,2,3],[5,6,7])==[6,8,10]
    assert sum_list([15,20,30],[15,45,75])==[30,65,105]
",[],"['assert sum_list([10,20,30],[15,25,35])==[25,45,65]', 'assert sum_list([1,2,3],[5,6,7])==[6,8,10]', 'assert sum_list([15,20,30],[15,45,75])==[30,65,105]']"
"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",average_tuple,"Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.

def average_tuple(nums):",Benchmark Questions Verification V2.ipynb,615,"def check():
    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]
    assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]
    assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]
",[],"['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]', 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]', 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']"
"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",max_run_uppercase,"Write a function to find maximum run of uppercase characters in the given string.

def max_run_uppercase(test_str):",Benchmark Questions Verification V2.ipynb,806,"def check():
    assert max_run_uppercase('GeMKSForGERksISBESt') == 5
    assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6
    assert max_run_uppercase('GooGLEFluTTER') == 4
",[],"[""assert max_run_uppercase('GeMKSForGERksISBESt') == 5"", ""assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6"", ""assert max_run_uppercase('GooGLEFluTTER') == 4""]"
"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",remove_odd,"Write a function to remove odd characters in a string.

def remove_odd(str1):",charlessutton@: Benchmark Questions Verification V2.ipynb,437,"def check():
    assert remove_odd(""python"")==(""yhn"")
    assert remove_odd(""program"")==(""rga"")
    assert remove_odd(""language"")==(""agae"")
",[],"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']"
"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",volume_cylinder,"Write a function that takes in the radius and height of a cylinder and returns the the volume.

def volume_cylinder(r,h):",Benchmark Questions Verification V2.ipynb,276,"def check():
    assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)
    assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)
    assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)
",['import math'],"['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']"
"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",max_occurrences,"Write a function to find the item with maximum frequency in a given list.
from collections import defaultdict
def max_occurrences(nums):",Mike's Copy of Benchmark Questions Verification V2.ipynb,130,"def check():
    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2
    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8
    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20
",[],"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20']"
"def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",find_length,"Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.

def find_length(string): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,125,"def check():
    assert find_length(""11000010001"") == 6
    assert find_length(""10111"") == 1
    assert find_length(""11011101100101"") == 2
",[],"['assert find_length(""11000010001"") == 6', 'assert find_length(""10111"") == 1', 'assert find_length(""11011101100101"") == 2']"
"def is_Diff(n): 
    return (n % 11 == 0) ",is_Diff,"Write a python function to find whether a number is divisible by 11.

def is_Diff(n): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,77,"def check():
    assert is_Diff (12345) == False
    assert is_Diff(1212112) == True
    assert is_Diff(1212) == False
",[],"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']"
"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",number_of_substrings,"Write a python function to count the number of non-empty substrings of a given string.

def number_of_substrings(str): ",Benchmark Questions Verification V2.ipynb,238,"def check():
    assert number_of_substrings(""abc"") == 6
    assert number_of_substrings(""abcd"") == 10
    assert number_of_substrings(""abcde"") == 15
",[],"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']"
"def find_sum(arr): 
    arr.sort() 
    sum = arr[0] 
    for i in range(len(arr)-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",find_sum,"Write a python function to find the sum of non-repeated elements in a given list.

def find_sum(arr): ",Benchmark Questions Verification V2.ipynb,777,"def check():
    assert find_sum([1,2,3,1,1,4,5,6]) == 21
    assert find_sum([1,10,9,4,2,10,10,45,4]) == 71
    assert find_sum([12,10,9,45,2,10,10,45,10]) == 78
",[],"['assert find_sum([1,2,3,1,1,4,5,6]) == 21', 'assert find_sum([1,10,9,4,2,10,10,45,4]) == 71', 'assert find_sum([12,10,9,45,2,10,10,45,10]) == 78']"
"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",long_words,"Write a function to find words that are longer than n characters from a given list of words.

def long_words(n, str):",Mike's Copy of Benchmark Questions Verification V2.ipynb,128,"def check():
    assert long_words(3,""python is a programming language"")==['python','programming','language']
    assert long_words(2,""writing a program"")==['writing','program']
    assert long_words(5,""sorting list"")==['sorting']
",[],"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']"
"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",remove_whitespaces,"Write a function to remove all whitespaces from the given string.
import re
def remove_whitespaces(text1):",charlessutton@: Benchmark Questions Verification V2.ipynb,451,"def check():
    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'
    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'
    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'
",[],"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]"
"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",jacobsthal_num,"Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...

def jacobsthal_num(n): ",Benchmark Questions Verification V2.ipynb,752,"def check():
    assert jacobsthal_num(5) == 11
    assert jacobsthal_num(2) == 1
    assert jacobsthal_num(4) == 5
    assert jacobsthal_num(13) == 2731
",[],"['assert jacobsthal_num(5) == 11', 'assert jacobsthal_num(2) == 1', 'assert jacobsthal_num(4) == 5', 'assert jacobsthal_num(13) == 2731']"
"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check_answer(n):    
    return (2 * rev(n) == n + 1)  ",check_answer,"Write a python function to check if a given number is one less than twice its reverse.

def check_answer(n):    ",Mike's Copy of Benchmark Questions Verification V2.ipynb,56,"def check():
    assert check_answer(70) == False
    assert check_answer(23) == False
    assert check_answer(73) == True
",[],"['assert check_answer(70) == False', 'assert check_answer(23) == False', 'assert check_answer(73) == True']"
"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",find_Odd_Pair,"Write a python function to count the number of pairs whose xor value is odd.

def find_Odd_Pair(A,N) : ",Benchmark Questions Verification V2.ipynb,556,"def check():
    assert find_Odd_Pair([5,4,7,2,1],5) == 6
    assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12
    assert find_Odd_Pair([1,2,3],3) == 2
",[],"['assert find_Odd_Pair([5,4,7,2,1],5) == 6', 'assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12', 'assert find_Odd_Pair([1,2,3],3) == 2']"
"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",k_smallest_pairs,"Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.
import heapq
def k_smallest_pairs(nums1, nums2, k):",Benchmark Questions Verification V2.ipynb,408,"def check():
    assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]
    assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]
    assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]
",[],"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']"
"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",similar_elements,"Write a function to find the shared elements from the given two lists.

def similar_elements(test_tup1, test_tup2):",Benchmark Questions Verification V2.ipynb,2,"def check():
    assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))
    assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))
    assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))
",[],"['assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))', 'assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))', 'assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))']"
"from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",count_Substrings,"Write a python function to count the number of substrings with the sum of digits equal to their length.
from collections import defaultdict
def count_Substrings(s):",Mike's Copy of Benchmark Questions Verification V2.ipynb,61,"def check():
    assert count_Substrings('112112') == 6
    assert count_Substrings('111') == 6
    assert count_Substrings('1101112') == 12
",[],"[""assert count_Substrings('112112') == 6"", ""assert count_Substrings('111') == 6"", ""assert count_Substrings('1101112') == 12""]"
"def second_smallest(numbers):
  unique_numbers = list(set(numbers))
  unique_numbers.sort()
  if len(unique_numbers) < 2:
    return None
  else:
    return unique_numbers[1]",second_smallest,"Write a function to find the second smallest number in a list.

def second_smallest(numbers):",Benchmark Questions Verification V2.ipynb,755,"def check():
    assert second_smallest([1, 2, -8, -2, 0, -2])==-2
    assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5
    assert second_smallest([2,2])==None
    assert second_smallest([2,2,2])==None
",[],"['assert second_smallest([1, 2, -8, -2, 0, -2])==-2', 'assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5', 'assert second_smallest([2,2])==None', 'assert second_smallest([2,2,2])==None']"
"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",surfacearea_cylinder,"Write a function to find the surface area of a cylinder.

def surfacearea_cylinder(r,h):",Benchmark Questions Verification V2.ipynb,574,"def check():
    assert surfacearea_cylinder(10,5)==942.45
    assert surfacearea_cylinder(4,5)==226.18800000000002
    assert surfacearea_cylinder(4,10)==351.848
",[],"['assert surfacearea_cylinder(10,5)==942.45', 'assert surfacearea_cylinder(4,5)==226.18800000000002', 'assert surfacearea_cylinder(4,10)==351.848']"
"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",snake_to_camel,"Write a function to convert a snake case string to camel case string.

def snake_to_camel(word):",Mike's Copy of Benchmark Questions Verification V2.ipynb,102,"def check():
    assert snake_to_camel('python_program')=='PythonProgram'
    assert snake_to_camel('python_language')==('PythonLanguage')
    assert snake_to_camel('programming_language')==('ProgrammingLanguage')
",[],"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]"
"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",start_withp,"Write a function to return two words from a list of words starting with letter 'p'.
import re
def start_withp(words):",Ellen's Copy of Benchmark Questions Verification V2.ipynb,305,"def check():
    assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==('Python', 'PHP')
    assert start_withp([""Python Programming"",""Java Programming""])==('Python','Programming')
    assert start_withp([""Pqrst Pqr"",""qrstuv""])==('Pqrst','Pqr')
",[],"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']"
"def hexagonal_num(n): 
	return n*(2*n - 1) ",hexagonal_num,"Write a function to find the nth hexagonal number.

def hexagonal_num(n): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,135,"def check():
    assert hexagonal_num(10) == 190
    assert hexagonal_num(5) == 45
    assert hexagonal_num(7) == 91
",[],"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']"
"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",extract_freq,"Write a function to extract the number of unique tuples in the given list.

def extract_freq(test_list):",Benchmark Questions Verification V2.ipynb,400,"def check():
    assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3
    assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4
    assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4
",[],"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']"
"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",unique_product,"Write a python function to calculate the product of the unique numbers in a given list.

def unique_product(list_data):",Benchmark Questions Verification V2.ipynb,573,"def check():
    assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000
    assert unique_product([1, 2, 3, 1,]) == 6
    assert unique_product([7, 8, 9, 0, 1, 1]) == 0
",[],"['assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000', 'assert unique_product([1, 2, 3, 1,]) == 6', 'assert unique_product([7, 8, 9, 0, 1, 1]) == 0']"
"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",reverse_vowels,"Write a python function to reverse only the vowels of a given string (where y is not a vowel).

def reverse_vowels(str1):",Mike's Copy of Benchmark Questions Verification V2.ipynb,131,"def check():
    assert reverse_vowels(""Python"") == ""Python""
    assert reverse_vowels(""USA"") == ""ASU""
    assert reverse_vowels(""ab"") == ""ab""
",[],"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']"
"def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",max_Abs_Diff,"Write a python function to find the maximum difference between any two elements in a given array.

def max_Abs_Diff(arr): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,145,"def check():
    assert max_Abs_Diff((2,1,5,3)) == 4
    assert max_Abs_Diff((9,3,2,5,1)) == 8
    assert max_Abs_Diff((3,2,1)) == 2
",[],"['assert max_Abs_Diff((2,1,5,3)) == 4', 'assert max_Abs_Diff((9,3,2,5,1)) == 8', 'assert max_Abs_Diff((3,2,1)) == 2']"
"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",tuple_to_dict,"Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/

def tuple_to_dict(test_tup):",Benchmark Questions Verification V2.ipynb,740,"def check():
    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}
    assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}
    assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}
",[],"['assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}', 'assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}', 'assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}']"
"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",bell_number,"Write a function to find the number of ways to partition a set of Bell numbers.

def bell_number(n):   ",Mike's Copy of Benchmark Questions Verification V2.ipynb,67,"def check():
    assert bell_number(2)==2
    assert bell_number(10)==115975
    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300
",[],"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']"
"def Diff(li1,li2):
    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))
 ",Diff,"Write a python function to get the difference between two lists.

def Diff(li1,li2):",Benchmark Questions Verification V2.ipynb,769,"def check():
    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]
    assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]
    assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]
",[],"['assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]', 'assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]', 'assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]']"
"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",find_lucas,"Write a function to find the n'th lucas number.

def find_lucas(n): ",Benchmark Questions Verification V2.ipynb,389,"def check():
    assert find_lucas(9) == 76
    assert find_lucas(4) == 7
    assert find_lucas(3) == 4
",[],"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']"
"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",maximum,"Write a python function to find the maximum of two numbers.

def maximum(a,b):   ",Ellen's Copy of Benchmark Questions Verification V2.ipynb,309,"def check():
    assert maximum(5,10) == 10
    assert maximum(-1,-2) == -1
    assert maximum(9,7) == 9
",[],"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']"
"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",freq_count,"Write a function to get the frequency of all the elements in a list, returned as a dictionary.
import collections
def freq_count(list1):",Mike's Copy of Benchmark Questions Verification V2.ipynb,88,"def check():
    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})
    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})
    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})
",[],"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})']"
"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",get_max_sum,"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).

def get_max_sum (n):",Benchmark Questions Verification V2.ipynb,392,"def check():
    assert get_max_sum(60) == 106
    assert get_max_sum(10) == 12
    assert get_max_sum(2) == 2
",[],"['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']"
"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",_sum,"Write a python function to find the sum of an array.

def _sum(arr):  ",Benchmark Questions Verification V2.ipynb,798,"def check():
    assert _sum([1, 2, 3]) == 6
    assert _sum([15, 12, 13, 10]) == 50
    assert _sum([0, 1, 2]) == 3
",[],"['assert _sum([1, 2, 3]) == 6', 'assert _sum([15, 12, 13, 10]) == 50', 'assert _sum([0, 1, 2]) == 3']"
"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",is_majority,"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)

def is_majority(arr, n, x):",Benchmark Questions Verification V2.ipynb,223,"def check():
    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True
    assert is_majority([1, 1, 2, 2], 5, 1) == False
",[],"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True', 'assert is_majority([1, 1, 2, 2], 5, 1) == False']"
"import re
def text_match_zero_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False",text_match_zero_one,"Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php
import re
def text_match_zero_one(text):",Benchmark Questions Verification V2.ipynb,756,"def check():
    assert text_match_zero_one(""ac"")==False
    assert text_match_zero_one(""dc"")==False
    assert text_match_zero_one(""abbbba"")==True
    assert text_match_zero_one(""dsabbbba"")==True
    assert text_match_zero_one(""asbbbba"")==False
    assert text_match_zero_one(""abaaa"")==True
",[],"['assert text_match_zero_one(""ac"")==False', 'assert text_match_zero_one(""dc"")==False', 'assert text_match_zero_one(""abbbba"")==True', 'assert text_match_zero_one(""dsabbbba"")==True', 'assert text_match_zero_one(""asbbbba"")==False', 'assert text_match_zero_one(""abaaa"")==True']"
"def test_three_equal(x,y,z):
  result = set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return 4-len(result)",test_three_equal,"Write a python function to count the number of equal numbers from three given integers.

def test_three_equal(x,y,z):",Benchmark Questions Verification V2.ipynb,801,"def check():
    assert test_three_equal(1,1,1) == 3
    assert test_three_equal(-1,-2,-3) == 0
    assert test_three_equal(1,2,2) == 2
",[],"['assert test_three_equal(1,1,1) == 3', 'assert test_three_equal(-1,-2,-3) == 0', 'assert test_three_equal(1,2,2) == 2']"
"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",sum_digits,"Write a function to get the sum of the digits of a non-negative integer.

def sum_digits(n):",Benchmark Questions Verification V2.ipynb,566,"def check():
    assert sum_digits(345)==12
    assert sum_digits(12)==3
    assert sum_digits(97)==16
",[],"['assert sum_digits(345)==12', 'assert sum_digits(12)==3', 'assert sum_digits(97)==16']"
"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",subject_marks,"Write a function to sort a list of tuples using the second value of each tuple.

def subject_marks(subjectmarks):",Mike's Copy of Benchmark Questions Verification V2.ipynb,64,"def check():
    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])
",[],"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]"
"def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",is_undulating,"Write a function to check whether the given number is undulating or not.

def is_undulating(n): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,92,"def check():
    assert is_undulating(1212121) == True
    assert is_undulating(1991) == False
    assert is_undulating(121) == True
",[],"['assert is_undulating(1212121) == True', 'assert is_undulating(1991) == False', 'assert is_undulating(121) == True']"
"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",last_Digit_Factorial,"Write a python function to find the last digit in factorial of a given number.

def last_Digit_Factorial(n): ",Benchmark Questions Verification V2.ipynb,577,"def check():
    assert last_Digit_Factorial(4) == 4
    assert last_Digit_Factorial(21) == 0
    assert last_Digit_Factorial(30) == 0
",[],"['assert last_Digit_Factorial(4) == 4', 'assert last_Digit_Factorial(21) == 0', 'assert last_Digit_Factorial(30) == 0']"
"def volume_cube(l):
  volume = l * l * l
  return volume",volume_cube,"Write a function to find the volume of a cube given its side length.

def volume_cube(l):",Benchmark Questions Verification V2.ipynb,234,"def check():
    assert volume_cube(3)==27
    assert volume_cube(2)==8
    assert volume_cube(5)==125
",[],"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']"
"from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",area_polygon,"Write a function to calculate the area of a regular polygon given the length and number of its sides.
from math import tan, pi
def area_polygon(s, l):",Benchmark Questions Verification V2.ipynb,163,"def check():
    assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)
    assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)
    assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)
",['import math'],"['assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)', 'assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)', 'assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)']"
"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",extract_index_list,"We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.

def extract_index_list(l1, l2, l3):",Benchmark Questions Verification V2.ipynb,754,"def check():
    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]
    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]
    assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]
    assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]
",[],"['assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]', 'assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]', 'assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]', 'assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]']"
"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",eulerian_num,"Write a function to find the Eulerian number a(n, m).

def eulerian_num(n, m): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,103,"def check():
    assert eulerian_num(3, 1) == 4
    assert eulerian_num(4, 1) == 11
    assert eulerian_num(5, 3) == 26
",[],"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']"
"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",harmonic_sum,"Write a function that takes in an integer n and calculates the harmonic sum of n-1.

def harmonic_sum(n):",Benchmark Questions Verification V2.ipynb,248,"def check():
    assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)
    assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)
    assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)
",['import math'],"['assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)']"
"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",pos_count,"Write a python function to count the number of positive numbers in a list.

def pos_count(list):",Mike's Copy of Benchmark Questions Verification V2.ipynb,66,"def check():
    assert pos_count([1,-2,3,-4]) == 2
    assert pos_count([3,4,5,-1]) == 3
    assert pos_count([1,2,3,4]) == 4
",[],"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']"
"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",opposite_Signs,"Write a python function to check whether the given two integers have opposite sign or not.

def opposite_Signs(x,y): ",Mike's Copy of Benchmark Questions Verification V2.ipynb,58,"def check():
    assert opposite_Signs(1,-2) == True
    assert opposite_Signs(3,2) == False
    assert opposite_Signs(-10,-10) == False
    assert opposite_Signs(-2,2) == True
",[],"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False', 'assert opposite_Signs(-2,2) == True']"
