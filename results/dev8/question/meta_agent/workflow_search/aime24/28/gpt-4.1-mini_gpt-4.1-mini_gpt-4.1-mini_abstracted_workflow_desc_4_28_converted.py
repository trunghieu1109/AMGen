async def forward_28(self, taskInfo):
    from collections import Counter
    print("Task Requirement: ", taskInfo)
    sub_tasks = []
    agents = []
    logs = []

    cot_instruction_0_1 = (
        "Sub-task 1: Derive explicit geometric and algebraic representations of the torus and the sphere using the given parameters. "
        "Express the torus as the set of points generated by revolving a circle of radius 3 around an axis 6 units away, "
        "resulting in a torus with major radius R=6 and minor radius r=3. Express the sphere as the set of points at distance 11 from its center. "
        "Write their standard implicit equations and confirm their suitability for analyzing tangency conditions. "
        "Avoid any approximations or assumptions about positioning at this stage."
    )
    cot_agent_0_1 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_0_1 = {
        "subtask_id": "stage_1_subtask_1",
        "instruction": cot_instruction_0_1,
        "context": ["user query"],
        "agent_collaboration": "CoT"
    }
    thinking_0_1, answer_0_1 = await cot_agent_0_1([taskInfo], cot_instruction_0_1, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_0_1.id}, deriving geometric representations, thinking: {thinking_0_1.content}; answer: {answer_0_1.content}")
    sub_tasks.append(f"Sub-task stage_1_subtask_1 output: thinking - {thinking_0_1.content}; answer - {answer_0_1.content}")
    subtask_desc_0_1['response'] = {"thinking": thinking_0_1, "answer": answer_0_1}
    logs.append(subtask_desc_0_1)
    print("Step 1: ", sub_tasks[-1])

    cot_sc_instruction_0_2 = (
        "Sub-task 2: Clarify and explicitly define the two distinct configurations of external tangency between the torus and the sphere. "
        "Address the ambiguous phrase in the problem statement that repeats 'when T rests on the outside of S' twice by specifying one configuration as the torus resting 'above' the sphere (outer tangency with the torus hole facing upward) "
        "and the other as the torus resting 'below' the sphere (outer tangency with the torus hole facing downward). Justify these configurations based on symmetry and geometric feasibility. "
        "Establish assumptions about axis alignment (torus axis aligned with sphere center) and the plane of the tangent circle (perpendicular to the axis). "
        "This subtask ensures a clear geometric model for subsequent algebraic analysis."
    )
    N_sc = self.max_sc
    cot_agents_0_2 = [LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.5) for _ in range(N_sc)]
    possible_answers_0_2 = []
    possible_thinkings_0_2 = []
    subtask_desc_0_2 = {
        "subtask_id": "stage_1_subtask_2",
        "instruction": cot_sc_instruction_0_2,
        "context": ["user query", thinking_0_1.content, answer_0_1.content],
        "agent_collaboration": "SC_CoT"
    }
    for i in range(N_sc):
        thinking_i, answer_i = await cot_agents_0_2[i]([taskInfo, thinking_0_1, answer_0_1], cot_sc_instruction_0_2, is_sub_task=True)
        agents.append(f"CoT-SC agent {cot_agents_0_2[i].id}, clarifying tangency configurations, thinking: {thinking_i.content}; answer: {answer_i.content}")
        possible_answers_0_2.append(answer_i)
        possible_thinkings_0_2.append(thinking_i)

    final_decision_agent_0_2 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking_0_2, answer_0_2 = await final_decision_agent_0_2(
        [taskInfo] + possible_answers_0_2 + possible_thinkings_0_2,
        "Sub-task 2: Synthesize and choose the most consistent and correct tangency configurations.",
        is_sub_task=True
    )
    sub_tasks.append(f"Sub-task stage_1_subtask_2 output: thinking - {thinking_0_2.content}; answer - {answer_0_2.content}")
    subtask_desc_0_2['response'] = {"thinking": thinking_0_2, "answer": answer_0_2}
    logs.append(subtask_desc_0_2)
    print("Step 2: ", sub_tasks[-1])

    cot_instruction_0_3 = (
        "Sub-task 3: Formulate the precise algebraic conditions for external tangency between the torus and the sphere along a circle for each configuration. "
        "Express the vertical shift d of the torus center relative to the sphere center, derive the key equation sqrt(R^2 + d^2) = 11 Â± 3 relating the distance from the axis to the tangent point, sphere radius, and torus minor radius, "
        "and solve these equations rigorously for the two values of d (d1 and d2) corresponding to the two configurations. Show all algebraic steps explicitly, avoid approximations, and verify solutions satisfy geometric constraints."
    )
    cot_agent_0_3 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_0_3 = {
        "subtask_id": "stage_1_subtask_3",
        "instruction": cot_instruction_0_3,
        "context": ["user query", thinking_0_2.content, answer_0_2.content],
        "agent_collaboration": "CoT"
    }
    thinking_0_3, answer_0_3 = await cot_agent_0_3([taskInfo, thinking_0_2, answer_0_2], cot_instruction_0_3, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_0_3.id}, solving tangency conditions, thinking: {thinking_0_3.content}; answer: {answer_0_3.content}")
    sub_tasks.append(f"Sub-task stage_1_subtask_3 output: thinking - {thinking_0_3.content}; answer - {answer_0_3.content}")
    subtask_desc_0_3['response'] = {"thinking": thinking_0_3, "answer": answer_0_3}
    logs.append(subtask_desc_0_3)
    print("Step 3: ", sub_tasks[-1])

    cot_instruction_1_1 = (
        "Sub-task 1: Compute the cosine of the angle theta between the vertical axis and the radius vector to the tangent point on the generating circle for each configuration using cos(theta) = R / sqrt(R^2 + d^2). "
        "Then calculate the radius of the tangent circle on the torus surface for each configuration using r_c = R - r * cos(theta). "
        "Perform detailed numeric evaluations for r_i and r_o, ensuring all intermediate values (d, cos(theta), r_c) are explicitly recorded and verified. Avoid any ad-hoc or approximate reasoning."
    )
    cot_agent_1_1 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_1_1 = {
        "subtask_id": "stage_2_subtask_1",
        "instruction": cot_instruction_1_1,
        "context": ["user query", thinking_0_3.content, answer_0_3.content],
        "agent_collaboration": "CoT"
    }
    thinking_1_1, answer_1_1 = await cot_agent_1_1([taskInfo, thinking_0_3, answer_0_3], cot_instruction_1_1, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_1_1.id}, computing tangent circle radii, thinking: {thinking_1_1.content}; answer: {answer_1_1.content}")
    sub_tasks.append(f"Sub-task stage_2_subtask_1 output: thinking - {thinking_1_1.content}; answer - {answer_1_1.content}")
    subtask_desc_1_1['response'] = {"thinking": thinking_1_1, "answer": answer_1_1}
    logs.append(subtask_desc_1_1)
    print("Step 4: ", sub_tasks[-1])

    cot_instruction_1_2 = (
        "Sub-task 2: Calculate the difference r_i - r_o using the values obtained in the previous subtask. "
        "Express this difference as a fraction m/n in lowest terms, where m and n are relatively prime positive integers. "
        "Show all algebraic simplifications and numeric computations explicitly. Verify the fraction is fully reduced and consistent with the geometric model. "
        "Avoid skipping any simplification steps or assuming results without proof."
    )
    cot_agent_1_2 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_1_2 = {
        "subtask_id": "stage_2_subtask_2",
        "instruction": cot_instruction_1_2,
        "context": ["user query", thinking_1_1.content, answer_1_1.content],
        "agent_collaboration": "CoT"
    }
    thinking_1_2, answer_1_2 = await cot_agent_1_2([taskInfo, thinking_1_1, answer_1_1], cot_instruction_1_2, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_1_2.id}, calculating difference and fraction simplification, thinking: {thinking_1_2.content}; answer: {answer_1_2.content}")
    sub_tasks.append(f"Sub-task stage_2_subtask_2 output: thinking - {thinking_1_2.content}; answer - {answer_1_2.content}")
    subtask_desc_1_2['response'] = {"thinking": thinking_1_2, "answer": answer_1_2}
    logs.append(subtask_desc_1_2)
    print("Step 5: ", sub_tasks[-1])

    debate_instruction_2_1 = (
        "Sub-task 1: Aggregate the simplified fraction components m and n from r_i - r_o = m/n, verify correctness, and compute m + n. "
        "Cross-check with previous geometric and algebraic reasoning to confirm the final numeric result. "
        "Include a consistency check to confirm that the final numeric value aligns with the problem's geometric constraints and that no contradictions arise. "
        "Return the final numeric answer along with the verification outcome to ensure correctness and completeness."
    )
    debate_agents_2_1 = [LLMAgentBase(["thinking", "answer"], "Debate Agent", model=self.node_model, role=role, temperature=0.5) for role in self.debate_role]
    N_rounds = self.max_round
    all_thinking_2_1 = [[] for _ in range(N_rounds)]
    all_answer_2_1 = [[] for _ in range(N_rounds)]
    subtask_desc_2_1 = {
        "subtask_id": "stage_3_subtask_1",
        "instruction": debate_instruction_2_1,
        "context": ["user query", thinking_1_2.content, answer_1_2.content],
        "agent_collaboration": "Debate"
    }
    for r in range(N_rounds):
        for i, agent in enumerate(debate_agents_2_1):
            if r == 0:
                thinking_i, answer_i = await agent([taskInfo, thinking_1_2, answer_1_2], debate_instruction_2_1, r, is_sub_task=True)
            else:
                input_infos = [taskInfo, thinking_1_2, answer_1_2] + all_thinking_2_1[r-1] + all_answer_2_1[r-1]
                thinking_i, answer_i = await agent(input_infos, debate_instruction_2_1, r, is_sub_task=True)
            agents.append(f"Debate agent {agent.id}, round {r}, aggregating final answer, thinking: {thinking_i.content}; answer: {answer_i.content}")
            all_thinking_2_1[r].append(thinking_i)
            all_answer_2_1[r].append(answer_i)

    final_decision_agent_2_1 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking_2_1, answer_2_1 = await final_decision_agent_2_1(
        [taskInfo] + all_thinking_2_1[-1] + all_answer_2_1[-1],
        "Sub-task 3: Synthesize and finalize the verified final answer m + n.",
        is_sub_task=True
    )
    sub_tasks.append(f"Sub-task stage_3_subtask_1 output: thinking - {thinking_2_1.content}; answer - {answer_2_1.content}")
    subtask_desc_2_1['response'] = {"thinking": thinking_2_1, "answer": answer_2_1}
    logs.append(subtask_desc_2_1)
    print("Step 6: ", sub_tasks[-1])

    reflect_instruction_2_2 = (
        "Sub-task 2: Given the computed final answer m + n, carefully reflect on the entire calculation steps and verification. "
        "Use Reflexion to identify any possible errors or improvements and refine the solution accordingly. "
        "Ensure the final answer is consistent with all previous geometric and algebraic reasoning."
    )
    cot_agent_2_2 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    critic_agent_2_2 = LLMAgentBase(["feedback", "correct"], "Critic Agent", model=self.node_model, temperature=0.0)
    cot_inputs_2_2 = [taskInfo, thinking_2_1, answer_2_1]
    subtask_desc_2_2 = {
        "subtask_id": "stage_3_subtask_2",
        "instruction": reflect_instruction_2_2,
        "context": ["user query", thinking_2_1.content, answer_2_1.content],
        "agent_collaboration": "Reflexion"
    }
    thinking_2_2, answer_2_2 = await cot_agent_2_2(cot_inputs_2_2, reflect_instruction_2_2, 0, is_sub_task=True)
    agents.append(f"Reflexion CoT agent {cot_agent_2_2.id}, reflecting on final answer, thinking: {thinking_2_2.content}; answer: {answer_2_2.content}")
    for i in range(self.max_round):
        feedback, correct = await critic_agent_2_2([taskInfo, thinking_2_2, answer_2_2],
                                                  "Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output exactly 'True' in 'correct'",
                                                  i, is_sub_task=True)
        agents.append(f"Critic agent {critic_agent_2_2.id}, providing feedback, thinking: {feedback.content}; answer: {correct.content}")
        if correct.content == "True":
            break
        cot_inputs_2_2.extend([thinking_2_2, answer_2_2, feedback])
        thinking_2_2, answer_2_2 = await cot_agent_2_2(cot_inputs_2_2, reflect_instruction_2_2, i + 1, is_sub_task=True)
        agents.append(f"Reflexion CoT agent {cot_agent_2_2.id}, refining final answer, thinking: {thinking_2_2.content}; answer: {answer_2_2.content}")
    sub_tasks.append(f"Sub-task stage_3_subtask_2 output: thinking - {thinking_2_2.content}; answer - {answer_2_2.content}")
    subtask_desc_2_2['response'] = {"thinking": thinking_2_2, "answer": answer_2_2}
    logs.append(subtask_desc_2_2)
    print("Step 7: ", sub_tasks[-1])

    cot_instruction_3_1 = (
        "Sub-task 1: Aggregate the final verified answer m + n from previous subtasks. "
        "Cross-check all previous algebraic derivations, numeric computations, and geometric assumptions to confirm correctness and completeness. "
        "Return the final numeric answer as the solution to the problem."
    )
    cot_agent_3_1 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_3_1 = {
        "subtask_id": "stage_3_subtask_3",
        "instruction": cot_instruction_3_1,
        "context": ["user query", thinking_0_1.content, answer_0_1.content, thinking_0_3.content, answer_0_3.content, thinking_1_2.content, answer_1_2.content, thinking_2_2.content, answer_2_2.content],
        "agent_collaboration": "CoT"
    }
    thinking_3_1, answer_3_1 = await cot_agent_3_1(
        [taskInfo, thinking_0_1, answer_0_1, thinking_0_3, answer_0_3, thinking_1_2, answer_1_2, thinking_2_2, answer_2_2],
        cot_instruction_3_1,
        is_sub_task=True
    )
    agents.append(f"CoT agent {cot_agent_3_1.id}, aggregating final answer, thinking: {thinking_3_1.content}; answer: {answer_3_1.content}")
    sub_tasks.append(f"Sub-task stage_3_subtask_3 output: thinking - {thinking_3_1.content}; answer - {answer_3_1.content}")
    subtask_desc_3_1['response'] = {"thinking": thinking_3_1, "answer": answer_3_1}
    logs.append(subtask_desc_3_1)
    print("Step 8: ", sub_tasks[-1])

    final_answer = await self.make_final_answer(thinking_3_1, answer_3_1, sub_tasks, agents)
    return final_answer, logs
