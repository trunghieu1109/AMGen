async def forward_156(self, taskInfo):
    from collections import Counter
    print("Task Requirement: ", taskInfo)
    sub_tasks = []
    agents = []
    logs = []

    cot_sc_instruction = "Sub-task 1: Analyze and classify the key biological and technical elements involved in designing a molecular diagnostic kit for a retrovirus, including virus genome type, possible molecular targets (viral DNA, cDNA, antibodies), and diagnostic techniques (PCR variants, ELISA)."
    N = self.max_sc
    cot_agents = [LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.5) for _ in range(N)]
    possible_answers = []
    possible_thinkings = []
    subtask_desc1 = {
        "subtask_id": "subtask_1",
        "instruction": cot_sc_instruction,
        "context": ["user query"],
        "agent_collaboration": "SC_CoT"
    }
    for i in range(N):
        thinking1, answer1 = await cot_agents[i]([taskInfo], cot_sc_instruction, is_sub_task=True)
        agents.append(f"CoT-SC agent {cot_agents[i].id}, analyze and classify key elements, thinking: {thinking1.content}; answer: {answer1.content}")
        possible_answers.append(answer1)
        possible_thinkings.append(thinking1)
    final_decision_agent_1 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking1, answer1 = await final_decision_agent_1([taskInfo] + possible_thinkings + possible_answers, "Sub-task 1: Synthesize and choose the most consistent and correct classification of key biological and technical elements.", is_sub_task=True)
    sub_tasks.append(f"Sub-task 1 output: thinking - {thinking1.content}; answer - {answer1.content}")
    subtask_desc1['response'] = {
        "thinking": thinking1,
        "answer": answer1
    }
    logs.append(subtask_desc1)
    print("Step 1: ", sub_tasks[-1])

    debate_instr = "Given solutions to the problem from other agents, consider their opinions as additional advice. Please think carefully and provide an updated answer."
    debate_instruction_1 = "Sub-task 2.1: Generate and evaluate variant diagnostic approaches based on the identified elements, considering the pros and cons of targeting viral genome (DNA/cDNA) versus antibodies, and the suitability of PCR, nested PCR, real-time PCR, and ELISA for quick and accurate detection." + debate_instr
    debate_agents_1 = [LLMAgentBase(["thinking", "answer"], "Debate Agent", model=self.node_model, role=role, temperature=0.5) for role in self.debate_role]
    N_max_1 = self.max_round
    all_thinking1 = [[] for _ in range(N_max_1)]
    all_answer1 = [[] for _ in range(N_max_1)]
    subtask_desc2_1 = {
        "subtask_id": "subtask_2_1",
        "instruction": debate_instruction_1,
        "context": ["user query", f"thinking of subtask 1", f"answer of subtask 1"],
        "agent_collaboration": "Debate"
    }
    for r in range(N_max_1):
        for i, agent in enumerate(debate_agents_1):
            if r == 0:
                thinking2_1, answer2_1 = await agent([taskInfo, thinking1, answer1], debate_instruction_1, r, is_sub_task=True)
            else:
                input_infos_1 = [taskInfo, thinking1, answer1] + all_thinking1[r-1] + all_answer1[r-1]
                thinking2_1, answer2_1 = await agent(input_infos_1, debate_instruction_1, r, is_sub_task=True)
            agents.append(f"Debate agent {agent.id}, round {r}, generate and evaluate diagnostic approaches, thinking: {thinking2_1.content}; answer: {answer2_1.content}")
            all_thinking1[r].append(thinking2_1)
            all_answer1[r].append(answer2_1)
    final_decision_agent_2_1 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking2_1, answer2_1 = await final_decision_agent_2_1([taskInfo, thinking1, answer1] + all_thinking1[-1] + all_answer1[-1], "Sub-task 2.1: Synthesize and select the best diagnostic approaches." + "Given all the above thinking and answers, reason over them carefully and provide a final answer.", is_sub_task=True)
    sub_tasks.append(f"Sub-task 2.1 output: thinking - {thinking2_1.content}; answer - {answer2_1.content}")
    subtask_desc2_1['response'] = {
        "thinking": thinking2_1,
        "answer": answer2_1
    }
    logs.append(subtask_desc2_1)
    print("Step 2.1: ", sub_tasks[-1])

    debate_instruction_2 = "Sub-task 2.2: Prioritize the diagnostic approaches generated by assessing their feasibility, speed, accuracy, and alignment with retrovirus biology (e.g., RNA genome requiring reverse transcription), to select the most appropriate molecular diagnostic strategy." + debate_instr
    debate_agents_2 = [LLMAgentBase(["thinking", "answer"], "Debate Agent", model=self.node_model, role=role, temperature=0.5) for role in self.debate_role]
    N_max_2 = self.max_round
    all_thinking2 = [[] for _ in range(N_max_2)]
    all_answer2 = [[] for _ in range(N_max_2)]
    subtask_desc2_2 = {
        "subtask_id": "subtask_2_2",
        "instruction": debate_instruction_2,
        "context": ["user query", f"thinking of subtask 1", f"answer of subtask 1", f"thinking of subtask 2.1", f"answer of subtask 2.1"],
        "agent_collaboration": "Debate"
    }
    for r in range(N_max_2):
        for i, agent in enumerate(debate_agents_2):
            if r == 0:
                thinking2_2, answer2_2 = await agent([taskInfo, thinking1, answer1, thinking2_1, answer2_1], debate_instruction_2, r, is_sub_task=True)
            else:
                input_infos_2 = [taskInfo, thinking1, answer1, thinking2_1, answer2_1] + all_thinking2[r-1] + all_answer2[r-1]
                thinking2_2, answer2_2 = await agent(input_infos_2, debate_instruction_2, r, is_sub_task=True)
            agents.append(f"Debate agent {agent.id}, round {r}, prioritize diagnostic approaches, thinking: {thinking2_2.content}; answer: {answer2_2.content}")
            all_thinking2[r].append(thinking2_2)
            all_answer2[r].append(answer2_2)
    final_decision_agent_2_2 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking2_2, answer2_2 = await final_decision_agent_2_2([taskInfo, thinking1, answer1, thinking2_1, answer2_1] + all_thinking2[-1] + all_answer2[-1], "Sub-task 2.2: Synthesize and select the most appropriate molecular diagnostic strategy." + "Given all the above thinking and answers, reason over them carefully and provide a final answer.", is_sub_task=True)
    sub_tasks.append(f"Sub-task 2.2 output: thinking - {thinking2_2.content}; answer - {answer2_2.content}")
    subtask_desc2_2['response'] = {
        "thinking": thinking2_2,
        "answer": answer2_2
    }
    logs.append(subtask_desc2_2)
    print("Step 2.2: ", sub_tasks[-1])

    cot_instruction_3 = "Sub-task 3: Compute and finalize the design of the molecular diagnostic kit by integrating the prioritized approach, specifying the molecular target, detection method, and workflow (e.g., cDNA sequencing followed by real-time PCR), ensuring quick and accurate detection of the retrovirus."
    cot_agent_3 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc3 = {
        "subtask_id": "subtask_3",
        "instruction": cot_instruction_3,
        "context": ["user query", f"thinking of subtask 2.1", f"answer of subtask 2.1", f"thinking of subtask 2.2", f"answer of subtask 2.2"],
        "agent_collaboration": "CoT"
    }
    thinking3, answer3 = await cot_agent_3([taskInfo, thinking2_1, answer2_1, thinking2_2, answer2_2], cot_instruction_3, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_3.id}, finalize molecular diagnostic kit design, thinking: {thinking3.content}; answer: {answer3.content}")
    sub_tasks.append(f"Sub-task 3 output: thinking - {thinking3.content}; answer - {answer3.content}")
    subtask_desc3['response'] = {
        "thinking": thinking3,
        "answer": answer3
    }
    logs.append(subtask_desc3)
    print("Step 3: ", sub_tasks[-1])

    final_answer = await self.make_final_answer(thinking3, answer3, sub_tasks, agents)
    return final_answer, logs
