async def forward_28(self, taskInfo):
    from collections import Counter
    print("Task Requirement: ", taskInfo)
    sub_tasks = []
    agents = []
    logs = []

    cot_instruction_1 = (
        "Sub-task 1: Establish the geometric and parametric representations of the torus and the sphere. "
        "Define the torus with major radius R=6 and minor radius r=3, generated by revolving a circle of radius 3 around an axis in the plane of the circle at distance 6 from its center. "
        "Define the sphere with radius 11 centered at the origin. Set up a coordinate system with the torus axis vertical (z-axis). "
        "Write explicit parametric equations for the torus surface and the sphere surface. "
        "Clarify the meaning of external tangency along a circle between these surfaces, emphasizing that the torus and sphere touch along a continuous circle, not just a point. "
        "Avoid making assumptions about the torus orientation beyond the given; ensure all definitions are consistent and precise. "
        "This subtask lays the foundation for rigorous tangency analysis."
    )
    cot_agent_1 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_1 = {
        "subtask_id": "subtask_1",
        "instruction": cot_instruction_1,
        "context": ["user query"],
        "agent_collaboration": "CoT"
    }
    print(f"Logging before agent call: {subtask_desc_1}")
    thinking_1, answer_1 = await cot_agent_1([taskInfo], cot_instruction_1, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_1.id}, deriving geometric representations, thinking: {thinking_1.content}; answer: {answer_1.content}")
    sub_tasks.append(f"Sub-task 1 output: thinking - {thinking_1.content}; answer - {answer_1.content}")
    subtask_desc_1['response'] = {"thinking": thinking_1, "answer": answer_1}
    logs.append(subtask_desc_1)
    print("Step 1: ", sub_tasks[-1])

    cot_sc_instruction_2 = (
        "Sub-task 2: Derive the explicit expression for the torus surface normal vector N(theta, phi) at an arbitrary point on the torus, "
        "where theta and phi parametrize the torus major and minor circles respectively. Similarly, express the sphere normal vector at a contact point as the vector from the sphere center to that point. "
        "Formulate the external tangency condition along a circle by enforcing that at every point of the tangent circle, the torus normal vector and the sphere normal vector are parallel (N parallel to P), "
        "and the distance from the sphere center to the contact point equals the sphere radius. Avoid oversimplified assumptions such as equating distances without normal matching. "
        "This subtask ensures the tangency condition is derived from first principles and is physically meaningful."
    )
    N_sc = self.max_sc
    cot_agents_2 = [LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.5) for _ in range(N_sc)]
    possible_answers_2 = []
    thinkingmapping_2 = {}
    answermapping_2 = {}
    subtask_desc_2 = {
        "subtask_id": "subtask_2",
        "instruction": cot_sc_instruction_2,
        "context": ["user query", thinking_1.content, answer_1.content],
        "agent_collaboration": "SC_CoT"
    }
    print(f"Logging before agent calls: {subtask_desc_2}")
    for i in range(N_sc):
        thinking_i, answer_i = await cot_agents_2[i]([taskInfo, thinking_1, answer_1], cot_sc_instruction_2, is_sub_task=True)
        agents.append(f"CoT-SC agent {cot_agents_2[i].id}, deriving tangency conditions, thinking: {thinking_i.content}; answer: {answer_i.content}")
        possible_answers_2.append(answer_i.content)
        thinkingmapping_2[answer_i.content] = thinking_i
        answermapping_2[answer_i.content] = answer_i
    best_answer_2 = Counter(possible_answers_2).most_common(1)[0][0]
    thinking_2 = thinkingmapping_2[best_answer_2]
    answer_2 = answermapping_2[best_answer_2]
    sub_tasks.append(f"Sub-task 2 output: thinking - {thinking_2.content}; answer - {answer_2.content}")
    subtask_desc_2['response'] = {"thinking": thinking_2, "answer": answer_2}
    logs.append(subtask_desc_2)
    print("Step 2: ", sub_tasks[-1])

    cot_sc_instruction_3 = (
        "Sub-task 3: Analyze the tangency condition equations derived in Subtask 2 to obtain a solvable relation involving the torus parameters (R=6, r=3), "
        "the sphere radius (11), and the torus minor circle parameter phi corresponding to the tangent circle. Solve for cos(phi) ensuring the solution lies within the valid range [-1,1] to guarantee physical feasibility. "
        "Identify the two distinct solutions for phi that correspond to the two different resting configurations of the torus on the sphere, each producing a tangent circle with radius r_i or r_o on the torus. "
        "Explicitly define which solution corresponds to r_i and which to r_o, supported by geometric interpretation (e.g., inner vs. outer contact). Include a geometric feasibility check to discard any extraneous or non-physical solutions. Avoid jumping to numeric approximations prematurely."
    )
    cot_agents_3 = [LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.5) for _ in range(N_sc)]
    possible_answers_3 = []
    thinkingmapping_3 = {}
    answermapping_3 = {}
    subtask_desc_3 = {
        "subtask_id": "subtask_3",
        "instruction": cot_sc_instruction_3,
        "context": ["user query", thinking_2.content, answer_2.content],
        "agent_collaboration": "SC_CoT"
    }
    print(f"Logging before agent calls: {subtask_desc_3}")
    for i in range(N_sc):
        thinking_i, answer_i = await cot_agents_3[i]([taskInfo, thinking_2, answer_2], cot_sc_instruction_3, is_sub_task=True)
        agents.append(f"CoT-SC agent {cot_agents_3[i].id}, solving for phi and identifying r_i, r_o, thinking: {thinking_i.content}; answer: {answer_i.content}")
        possible_answers_3.append(answer_i.content)
        thinkingmapping_3[answer_i.content] = thinking_i
        answermapping_3[answer_i.content] = answer_i
    best_answer_3 = Counter(possible_answers_3).most_common(1)[0][0]
    thinking_3 = thinkingmapping_3[best_answer_3]
    answer_3 = answermapping_3[best_answer_3]
    sub_tasks.append(f"Sub-task 3 output: thinking - {thinking_3.content}; answer - {answer_3.content}")
    subtask_desc_3['response'] = {"thinking": thinking_3, "answer": answer_3}
    logs.append(subtask_desc_3)
    print("Step 3: ", sub_tasks[-1])

    cot_instruction_4 = (
        "Sub-task 4: Express the radii r_i and r_o of the tangent circles on the torus in terms of the torus parameters and the solutions for phi obtained in Subtask 3. "
        "Derive explicit formulas for r_i and r_o, ensuring clarity in their geometric meaning as radii of the minor circle cross-section at the tangent points. "
        "Simplify these expressions algebraically to exact fractional form where possible. Avoid numerical approximations that obscure exact relationships. "
        "This subtask bridges the geometric solutions to explicit numeric expressions for the tangent circle radii."
    )
    cot_agent_4 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_4 = {
        "subtask_id": "subtask_4",
        "instruction": cot_instruction_4,
        "context": ["user query", thinking_3.content, answer_3.content],
        "agent_collaboration": "CoT"
    }
    print(f"Logging before agent call: {subtask_desc_4}")
    thinking_4, answer_4 = await cot_agent_4([taskInfo, thinking_3, answer_3], cot_instruction_4, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_4.id}, deriving explicit formulas for r_i and r_o, thinking: {thinking_4.content}; answer: {answer_4.content}")
    sub_tasks.append(f"Sub-task 4 output: thinking - {thinking_4.content}; answer - {answer_4.content}")
    subtask_desc_4['response'] = {"thinking": thinking_4, "answer": answer_4}
    logs.append(subtask_desc_4)
    print("Step 4: ", sub_tasks[-1])

    reflect_instruction_5 = (
        "Sub-task 5: Perform a reflexion and validation step on the derived expressions and values for r_i and r_o. "
        "Critically assess the assumptions made, verify that the tangency conditions and normal vector alignments hold, and confirm that the solutions correspond to physically plausible configurations. "
        "Explore alternative sign conventions or parameter interpretations if inconsistencies arise. Check that the difference r_i - r_o is consistent with the problem context and that intermediate values are within expected ranges. "
        "This subtask prevents propagation of conceptual errors and ensures robustness before final computations."
    )
    cot_agent_5 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    critic_agent_5 = LLMAgentBase(["feedback", "correct"], "Critic Agent", model=self.node_model, temperature=0.0)
    N_max_5 = self.max_round
    cot_inputs_5 = [taskInfo, thinking_4, answer_4]
    subtask_desc_5 = {
        "subtask_id": "subtask_5",
        "instruction": reflect_instruction_5,
        "context": ["user query", thinking_4.content, answer_4.content],
        "agent_collaboration": "Reflexion"
    }
    print(f"Logging before reflexion agent call: {subtask_desc_5}")
    thinking_5, answer_5 = await cot_agent_5(cot_inputs_5, reflect_instruction_5, 0, is_sub_task=True)
    agents.append(f"Reflexion CoT agent {cot_agent_5.id}, validating r_i and r_o, thinking: {thinking_5.content}; answer: {answer_5.content}")
    for i in range(N_max_5):
        feedback, correct = await critic_agent_5([taskInfo, thinking_5, answer_5],
                                                "Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output exactly 'True' in 'correct'", i, is_sub_task=True)
        agents.append(f"Critic agent {critic_agent_5.id}, providing feedback, thinking: {feedback.content}; answer: {correct.content}")
        if correct.content == "True":
            break
        cot_inputs_5.extend([thinking_5, answer_5, feedback])
        thinking_5, answer_5 = await cot_agent_5(cot_inputs_5, reflect_instruction_5, i + 1, is_sub_task=True)
        agents.append(f"Reflexion CoT agent {cot_agent_5.id}, refining validation, thinking: {thinking_5.content}; answer: {answer_5.content}")
    sub_tasks.append(f"Sub-task 5 output: thinking - {thinking_5.content}; answer - {answer_5.content}")
    subtask_desc_5['response'] = {"thinking": thinking_5, "answer": answer_5}
    logs.append(subtask_desc_5)
    print("Step 5: ", sub_tasks[-1])

    cot_instruction_6 = (
        "Sub-task 6: Calculate the difference r_i - r_o as a reduced fraction m/n, where m and n are positive integers with no common factors. "
        "Perform exact fraction reduction and verify the correctness of the simplification. Avoid rounding or approximations that could lead to incorrect final answers. "
        "This subtask finalizes the numeric computation required by the problem."
    )
    cot_agent_6 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_6 = {
        "subtask_id": "subtask_6",
        "instruction": cot_instruction_6,
        "context": ["user query", thinking_5.content, answer_5.content],
        "agent_collaboration": "CoT"
    }
    print(f"Logging before agent call: {subtask_desc_6}")
    thinking_6, answer_6 = await cot_agent_6([taskInfo, thinking_5, answer_5], cot_instruction_6, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_6.id}, computing reduced fraction for r_i - r_o, thinking: {thinking_6.content}; answer: {answer_6.content}")
    sub_tasks.append(f"Sub-task 6 output: thinking - {thinking_6.content}; answer - {answer_6.content}")
    subtask_desc_6['response'] = {"thinking": thinking_6, "answer": answer_6}
    logs.append(subtask_desc_6)
    print("Step 6: ", sub_tasks[-1])

    debate_instruction_7 = (
        "Sub-task 7: Compute the sum m + n from the reduced fraction m/n obtained in Subtask 6. "
        "Verify the arithmetic and confirm that the final answer aligns with the problem's requirements. "
        "Include a final verification step to ensure the solution is consistent with the geometric model and problem statement. "
        "Provide the final answer clearly and concisely. This subtask synthesizes the entire solution and confirms its validity."
    )
    debate_agents_7 = [LLMAgentBase(["thinking", "answer"], "Debate Agent", model=self.node_model, role=role, temperature=0.5) for role in self.debate_role]
    N_rounds_7 = self.max_round
    all_thinking_7 = [[] for _ in range(N_rounds_7)]
    all_answer_7 = [[] for _ in range(N_rounds_7)]
    subtask_desc_7 = {
        "subtask_id": "subtask_7",
        "instruction": debate_instruction_7,
        "context": ["user query", thinking_6.content, answer_6.content],
        "agent_collaboration": "Debate"
    }
    print(f"Logging before debate agent calls: {subtask_desc_7}")
    for r in range(N_rounds_7):
        for i, agent in enumerate(debate_agents_7):
            if r == 0:
                thinking_7, answer_7 = await agent([taskInfo, thinking_6, answer_6], debate_instruction_7, r, is_sub_task=True)
            else:
                input_infos_7 = [taskInfo, thinking_6, answer_6] + all_thinking_7[r-1] + all_answer_7[r-1]
                thinking_7, answer_7 = await agent(input_infos_7, debate_instruction_7, r, is_sub_task=True)
            agents.append(f"Debate agent {agent.id}, round {r}, computing m+n and final verification, thinking: {thinking_7.content}; answer: {answer_7.content}")
            all_thinking_7[r].append(thinking_7)
            all_answer_7[r].append(answer_7)
    final_decision_agent_7 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking_7, answer_7 = await final_decision_agent_7([taskInfo] + all_thinking_7[-1] + all_answer_7[-1], "Sub-task 7: Finalize sum m+n and verify solution." + debate_instruction_7, is_sub_task=True)
    agents.append(f"Final Decision agent, finalizing m+n and verifying answer, thinking: {thinking_7.content}; answer: {answer_7.content}")
    sub_tasks.append(f"Sub-task 7 output: thinking - {thinking_7.content}; answer - {answer_7.content}")
    subtask_desc_7['response'] = {"thinking": thinking_7, "answer": answer_7}
    logs.append(subtask_desc_7)
    print("Step 7: ", sub_tasks[-1])

    final_answer = await self.make_final_answer(thinking_7, answer_7, sub_tasks, agents)
    return final_answer, logs
