async def forward_165(self, taskInfo):
    logs = []

    cot_instruction_stage0_sub1 = (
        "Sub-task 1: Extract and transform the given Lagrangian, field representations, and vacuum expectation values "
        "into a structured theoretical framework suitable for analyzing radiative corrections."
    )
    cot_agent_desc_stage0_sub1 = {
        "instruction": cot_instruction_stage0_sub1,
        "input": [taskInfo],
        "temperature": 0.0,
        "context": ["user query"]
    }
    results_stage0_sub1, log_stage0_sub1 = await self.cot(
        subtask_id="stage_0.subtask_1",
        cot_agent_desc=cot_agent_desc_stage0_sub1
    )
    logs.append(log_stage0_sub1)

    cot_sc_instruction_stage1_sub1 = (
        "Sub-task 1: Combine the transformed theoretical inputs with known principles of radiative corrections "
        "and loop-induced mass generation to construct candidate expressions for the pseudo-Goldstone boson mass."
    )
    final_decision_instruction_stage1_sub1 = (
        "Sub-task 1: Synthesize and choose the most consistent candidate expressions for the pseudo-Goldstone boson mass."
    )
    cot_sc_desc_stage1_sub1 = {
        "instruction": cot_sc_instruction_stage1_sub1,
        "final_decision_instruction": final_decision_instruction_stage1_sub1,
        "input": [taskInfo, results_stage0_sub1.get('thinking', ''), results_stage0_sub1.get('answer', '')],
        "temperature": 0.5,
        "context": ["user query", "thinking of stage_0.subtask_1", "answer of stage_0.subtask_1"]
    }
    results_stage1_sub1, log_stage1_sub1 = await self.sc_cot(
        subtask_id="stage_1.subtask_1",
        cot_agent_desc=cot_sc_desc_stage1_sub1,
        n_repeat=self.max_sc
    )
    logs.append(log_stage1_sub1)

    cot_reflect_instruction_stage1_sub2 = (
        "Sub-task 2: Integrate the contributions from various particle loops (gauge bosons, scalars, fermions) "
        "and the role of VEVs to refine the candidate mass formulae, ensuring correct dependence on parameters and signs."
    )
    critic_instruction_stage1_sub2 = (
        "Please review and provide the limitations of provided solutions of candidate mass formulae, "
        "focusing on physical consistency and parameter dependence."
    )
    cot_reflect_desc_stage1_sub2 = {
        "instruction": cot_reflect_instruction_stage1_sub2,
        "critic_instruction": critic_instruction_stage1_sub2,
        "input": [
            taskInfo,
            results_stage0_sub1.get('thinking', ''), results_stage0_sub1.get('answer', ''),
            results_stage1_sub1.get('thinking', ''), results_stage1_sub1.get('answer', '')
        ],
        "temperature": 0.0,
        "context": [
            "user query",
            "thinking of stage_0.subtask_1", "answer of stage_0.subtask_1",
            "thinking of stage_1.subtask_1", "answer of stage_1.subtask_1"
        ]
    }
    results_stage1_sub2, log_stage1_sub2 = await self.reflexion(
        subtask_id="stage_1.subtask_2",
        reflect_desc=cot_reflect_desc_stage1_sub2,
        n_repeat=self.max_round
    )
    logs.append(log_stage1_sub2)

    debate_instruction_stage2_sub1 = (
        "Sub-task 1: Evaluate the candidate mass formulae against physical criteria and theoretical consistency "
        "to select the correct approximation for the pseudo-Goldstone boson mass generated by radiative corrections."
    )
    final_decision_instruction_stage2_sub1 = (
        "Sub-task 1: Select the best approximation formula for the pseudo-Goldstone boson mass based on debate outcomes."
    )
    debate_desc_stage2_sub1 = {
        "instruction": debate_instruction_stage2_sub1,
        "final_decision_instruction": final_decision_instruction_stage2_sub1,
        "input": [
            taskInfo,
            results_stage1_sub2.get('thinking', ''), results_stage1_sub2.get('answer', '')
        ],
        "context": [
            "user query",
            "thinking of stage_1.subtask_2", "answer of stage_1.subtask_2"
        ],
        "temperature": 0.5
    }
    results_stage2_sub1, log_stage2_sub1 = await self.debate(
        subtask_id="stage_2.subtask_1",
        debate_desc=debate_desc_stage2_sub1,
        n_repeat=self.max_round
    )
    logs.append(log_stage2_sub1)

    final_answer = await self.make_final_answer(
        results_stage2_sub1.get('thinking', ''),
        results_stage2_sub1.get('answer', '')
    )

    return final_answer, logs
