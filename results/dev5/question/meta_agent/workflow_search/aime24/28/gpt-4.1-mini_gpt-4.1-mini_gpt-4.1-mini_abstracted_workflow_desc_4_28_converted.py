async def forward_28(self, taskInfo):
    from collections import Counter
    print("Task Requirement: ", taskInfo)
    sub_tasks = []
    agents = []
    logs = []

    cot_instruction_0 = (
        "Sub-task 1: Derive and validate the formal geometric representations of the torus and sphere given the problem parameters. "
        "Express the torus as a surface generated by revolving a circle of radius 3 around an axis 6 units away, resulting in a torus with major radius R=6 and minor radius r=3. "
        "Represent the sphere as centered at the origin with radius 11. Confirm the standard torus equation ((sqrt(x^2 + y^2) - 6)^2 + z^2 = 9) and sphere equation (x^2 + y^2 + z^2 = 121). "
        "State assumptions about coordinate alignment and symmetry to simplify further analysis."
    )
    cot_agent_0 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    subtask_desc_0 = {
        "subtask_id": "stage_0.subtask_1",
        "instruction": cot_instruction_0,
        "context": ["user query"],
        "agent_collaboration": "CoT"
    }
    thinking_0, answer_0 = await cot_agent_0([taskInfo], cot_instruction_0, is_sub_task=True)
    agents.append(f"CoT agent {cot_agent_0.id}, deriving and validating geometric representations, thinking: {thinking_0.content}; answer: {answer_0.content}")
    sub_tasks.append(f"Sub-task 0 output: thinking - {thinking_0.content}; answer - {answer_0.content}")
    subtask_desc_0['response'] = {"thinking": thinking_0, "answer": answer_0}
    logs.append(subtask_desc_0)
    print("Step 0: ", sub_tasks[-1])

    cot_sc_instruction_1 = (
        "Sub-task 1: Identify the two distinct tangent configurations where the torus is externally tangent to the sphere along circles on the torus. "
        "Assuming the torus axis and sphere center are aligned along the z-axis for symmetry, determine the positions of the torus relative to the sphere for these tangencies. "
        "For each configuration, find the radius of the tangent circle on the torus (r_i and r_o). "
        "Analyze the cross-sectional circles of the torus at the points of tangency and relate them to the sphere's surface. "
        "Consider geometric constraints defining external tangency along a circle and avoid contradictory assumptions."
    )
    N_sc = self.max_sc
    cot_sc_agents_1 = [LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.5) for _ in range(N_sc)]
    possible_answers_1 = []
    possible_thinkings_1 = []
    subtask_desc_1 = {
        "subtask_id": "stage_1.subtask_1",
        "instruction": cot_sc_instruction_1,
        "context": ["user query", thinking_0.content, answer_0.content],
        "agent_collaboration": "SC_CoT"
    }
    for i in range(N_sc):
        thinking_1, answer_1 = await cot_sc_agents_1[i]([taskInfo, thinking_0, answer_0], cot_sc_instruction_1, is_sub_task=True)
        agents.append(f"CoT-SC agent {cot_sc_agents_1[i].id}, identifying tangent configurations, thinking: {thinking_1.content}; answer: {answer_1.content}")
        possible_answers_1.append(answer_1)
        possible_thinkings_1.append(thinking_1)

    final_decision_agent_1 = LLMAgentBase(["thinking", "answer"], "Final Decision Agent", model=self.node_model, temperature=0.0)
    thinking_1, answer_1 = await final_decision_agent_1([taskInfo] + possible_answers_1 + possible_thinkings_1, 
                                                      "Sub-task 1: Synthesize and choose the most consistent and correct tangent circle radii r_i and r_o.", 
                                                      is_sub_task=True)
    sub_tasks.append(f"Sub-task 1 output: thinking - {thinking_1.content}; answer - {answer_1.content}")
    subtask_desc_1['response'] = {"thinking": thinking_1, "answer": answer_1}
    logs.append(subtask_desc_1)
    print("Step 1: ", sub_tasks[-1])

    debate_instruction_2 = (
        "Sub-task 2: Compute the difference r_i - r_o between the radii of the two tangent circles found in Stage 1. "
        "Express this difference as a fraction m/n in lowest terms, ensuring m and n are positive integers with no common factors. "
        "Perform algebraic manipulation and simplification of the expressions derived for r_i and r_o. "
        "Verify correctness of the simplification and confirm the fraction is fully reduced. "
        "Consider opinions from multiple agents to ensure accuracy."
    )
    debate_agents_2 = [LLMAgentBase(["thinking", "answer"], "Debate Agent", model=self.node_model, role=role, temperature=0.5) for role in self.debate_role]
    N_rounds_2 = self.max_round
    all_thinking_2 = [[] for _ in range(N_rounds_2)]
    all_answer_2 = [[] for _ in range(N_rounds_2)]
    subtask_desc_2 = {
        "subtask_id": "stage_2.subtask_1",
        "instruction": debate_instruction_2,
        "context": ["user query", thinking_1.content, answer_1.content],
        "agent_collaboration": "Debate"
    }
    for r in range(N_rounds_2):
        for i, agent in enumerate(debate_agents_2):
            if r == 0:
                thinking_2, answer_2 = await agent([taskInfo, thinking_1, answer_1], debate_instruction_2, r, is_sub_task=True)
            else:
                input_infos_2 = [taskInfo, thinking_1, answer_1] + all_thinking_2[r-1] + all_answer_2[r-1]
                thinking_2, answer_2 = await agent(input_infos_2, debate_instruction_2, r, is_sub_task=True)
            agents.append(f"Debate agent {agent.id}, round {r}, computing difference and simplifying fraction, thinking: {thinking_2.content}; answer: {answer_2.content}")
            all_thinking_2[r].append(thinking_2)
            all_answer_2[r].append(answer_2)
    thinking_2, answer_2 = thinking_2, answer_2
    sub_tasks.append(f"Sub-task 2 output: thinking - {thinking_2.content}; answer - {answer_2.content}")
    subtask_desc_2['response'] = {"thinking": thinking_2, "answer": answer_2}
    logs.append(subtask_desc_2)
    print("Step 2: ", sub_tasks[-1])

    reflexion_instruction_3 = (
        "Sub-task 3: Aggregate the final result by computing m + n, where m/n is the reduced fraction representing r_i - r_o. "
        "Provide the final numeric answer and verify its consistency with the problem's requirements. "
        "Reflect on the entire solution process to ensure no logical or computational errors remain."
    )
    cot_agent_3 = LLMAgentBase(["thinking", "answer"], "Chain-of-Thought Agent", model=self.node_model, temperature=0.0)
    critic_agent_3 = LLMAgentBase(["feedback", "correct"], "Critic Agent", model=self.node_model, temperature=0.0)
    N_max_3 = self.max_round
    cot_inputs_3 = [taskInfo, thinking_0, answer_0, thinking_1, answer_1, thinking_2, answer_2]
    subtask_desc_3 = {
        "subtask_id": "stage_3.subtask_1",
        "instruction": reflexion_instruction_3,
        "context": ["user query", thinking_0.content, answer_0.content, thinking_1.content, answer_1.content, thinking_2.content, answer_2.content],
        "agent_collaboration": "Reflexion"
    }
    thinking_3, answer_3 = await cot_agent_3(cot_inputs_3, reflexion_instruction_3, 0, is_sub_task=True)
    agents.append(f"Reflexion CoT agent {cot_agent_3.id}, aggregating final result and verifying, thinking: {thinking_3.content}; answer: {answer_3.content}")
    for i in range(N_max_3):
        feedback_3, correct_3 = await critic_agent_3([taskInfo, thinking_3, answer_3], 
                                                    "Please review the answer above and criticize on where might be wrong. If you are absolutely sure it is correct, output exactly 'True' in 'correct'", 
                                                    i, is_sub_task=True)
        agents.append(f"Critic agent {critic_agent_3.id}, providing feedback, thinking: {feedback_3.content}; answer: {correct_3.content}")
        if correct_3.content == "True":
            break
        cot_inputs_3.extend([thinking_3, answer_3, feedback_3])
        thinking_3, answer_3 = await cot_agent_3(cot_inputs_3, reflexion_instruction_3, i + 1, is_sub_task=True)
        agents.append(f"Reflexion CoT agent {cot_agent_3.id}, refining final result, thinking: {thinking_3.content}; answer: {answer_3.content}")
    sub_tasks.append(f"Sub-task 3 output: thinking - {thinking_3.content}; answer - {answer_3.content}")
    subtask_desc_3['response'] = {"thinking": thinking_3, "answer": answer_3}
    logs.append(subtask_desc_3)
    print("Step 3: ", sub_tasks[-1])

    final_answer = await self.make_final_answer(thinking_3, answer_3, sub_tasks, agents)
    return final_answer, logs
